
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cfc  08007cfc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d04  08007d04  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000010  08007d1c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007d1c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017984  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c41  00000000  00000000  00037a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105c  00000000  00000000  0003bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  0003cb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189a4  00000000  00000000  00065949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011407d  00000000  00000000  0007e2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bf0  00000000  00000000  0019236c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00197f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007ca4 	.word	0x08007ca4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007ca4 	.word	0x08007ca4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f001 f992 	bl	800207e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 fae5 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 fdc5 	bl	80018ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000d62:	f000 fd99 	bl	8001898 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d66:	f000 fbc3 	bl	80014f0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d6a:	f000 fcc7 	bl	80016fc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d6e:	f000 fb27 	bl	80013c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d72:	f000 fc07 	bl	8001584 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d76:	f000 fd17 	bl	80017a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d7a:	213c      	movs	r1, #60	; 0x3c
 8000d7c:	4881      	ldr	r0, [pc, #516]	; (8000f84 <main+0x234>)
 8000d7e:	f004 fee9 	bl	8005b54 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d82:	217f      	movs	r1, #127	; 0x7f
 8000d84:	4880      	ldr	r0, [pc, #512]	; (8000f88 <main+0x238>)
 8000d86:	f002 fd1b 	bl	80037c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 3);
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	497f      	ldr	r1, [pc, #508]	; (8000f8c <main+0x23c>)
 8000d8e:	487e      	ldr	r0, [pc, #504]	; (8000f88 <main+0x238>)
 8000d90:	f001 fe08 	bl	80029a4 <HAL_ADC_Start_DMA>
//  PID.Kp = 15;
//  PID.Ki = 0.0002;
//  PID.Kd = 2.5;

  // motor
  PID.Kp = 15;
 8000d94:	4b7e      	ldr	r3, [pc, #504]	; (8000f90 <main+0x240>)
 8000d96:	4a7f      	ldr	r2, [pc, #508]	; (8000f94 <main+0x244>)
 8000d98:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0004;
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <main+0x240>)
 8000d9c:	4a7e      	ldr	r2, [pc, #504]	; (8000f98 <main+0x248>)
 8000d9e:	61da      	str	r2, [r3, #28]
  PID.Kd = 4;
 8000da0:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <main+0x240>)
 8000da2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000da6:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 8000da8:	2100      	movs	r1, #0
 8000daa:	4879      	ldr	r0, [pc, #484]	; (8000f90 <main+0x240>)
 8000dac:	f006 ff18 	bl	8007be0 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000db0:	487a      	ldr	r0, [pc, #488]	; (8000f9c <main+0x24c>)
 8000db2:	f004 fc45 	bl	8005640 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000db6:	2100      	movs	r1, #0
 8000db8:	4878      	ldr	r0, [pc, #480]	; (8000f9c <main+0x24c>)
 8000dba:	f004 fd13 	bl	80057e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4876      	ldr	r0, [pc, #472]	; (8000f9c <main+0x24c>)
 8000dc2:	f004 fd0f 	bl	80057e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000dc6:	4876      	ldr	r0, [pc, #472]	; (8000fa0 <main+0x250>)
 8000dc8:	f004 fc3a 	bl	8005640 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4874      	ldr	r0, [pc, #464]	; (8000fa0 <main+0x250>)
 8000dd0:	f004 fd08 	bl	80057e4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (check == 1)
 8000dd4:	4b73      	ldr	r3, [pc, #460]	; (8000fa4 <main+0x254>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	f040 80fb 	bne.w	8000fd4 <main+0x284>
	  {
		  NO1();
 8000dde:	f000 fe0f 	bl	8001a00 <NO1>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000de2:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <main+0x24c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000dea:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <main+0x24c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2200      	movs	r2, #0
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
		  setposition2 = ADC_RawRead[1];
 8000df2:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <main+0x23c>)
 8000df4:	885b      	ldrh	r3, [r3, #2]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <main+0x258>)
 8000e00:	edc3 7a00 	vstr	s15, [r3]
		  position2 = ADC_RawRead[2];
 8000e04:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <main+0x23c>)
 8000e06:	889b      	ldrh	r3, [r3, #4]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e10:	4b66      	ldr	r3, [pc, #408]	; (8000fac <main+0x25c>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]
		  Diff2 = ADC_RawRead[1] - ADC_RawRead[2];
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <main+0x23c>)
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <main+0x23c>)
 8000e1e:	889b      	ldrh	r3, [r3, #4]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	4a63      	ldr	r2, [pc, #396]	; (8000fb0 <main+0x260>)
 8000e24:	6013      	str	r3, [r2, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000e26:	f001 f98f 	bl	8002148 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	4b61      	ldr	r3, [pc, #388]	; (8000fb4 <main+0x264>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d9cf      	bls.n	8000dd4 <main+0x84>
		  {
			  timestamp = HAL_GetTick()+1;
 8000e34:	f001 f988 	bl	8002148 <HAL_GetTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a5d      	ldr	r2, [pc, #372]	; (8000fb4 <main+0x264>)
 8000e3e:	6013      	str	r3, [r2, #0]
			  Vfeedback2 = arm_pid_f32(&PID, setposition2 - position2);
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <main+0x258>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	4b59      	ldr	r3, [pc, #356]	; (8000fac <main+0x25c>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <main+0x240>)
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	edc7 7a05 	vstr	s15, [r7, #20]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e62:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e76:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e98:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Update state */
    S->state[1] = S->state[0];
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <main+0x268>)
 8000eb4:	6013      	str	r3, [r2, #0]
			  if (Vfeedback2 > 9999)
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <main+0x268>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000fbc <main+0x26c>
 8000ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	dd02      	ble.n	8000ed0 <main+0x180>
			  {
				  Vfeedback2 = 9999;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <main+0x268>)
 8000ecc:	4a3c      	ldr	r2, [pc, #240]	; (8000fc0 <main+0x270>)
 8000ece:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback2 < -9999)
 8000ed0:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <main+0x268>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000fc4 <main+0x274>
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d502      	bpl.n	8000eea <main+0x19a>
			  {
				  Vfeedback2 = -9999;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <main+0x268>)
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <main+0x278>)
 8000ee8:	601a      	str	r2, [r3, #0]
//			  }
////			  if (ADC_RawRead[2] == )
//			  {
//				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
//			  }
			  if (Diff2 < 0)
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <main+0x260>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da1c      	bge.n	8000f2c <main+0x1dc>
			  {
				  G = 1;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <main+0x27c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f003 facb 	bl	800449c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <main+0x280>)
 8000f0e:	f003 fac5 	bl	800449c <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -Vfeedback2);
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <main+0x268>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	eef1 7a67 	vneg.f32	s15, s15
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <main+0x250>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2a:	e01d      	b.n	8000f68 <main+0x218>
			  }
			  else if (Diff2 > 0)
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <main+0x260>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd19      	ble.n	8000f68 <main+0x218>
			  {
				  G = 2;
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <main+0x27c>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f003 faaa 	bl	800449c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <main+0x280>)
 8000f50:	f003 faa4 	bl	800449c <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Vfeedback2);
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <main+0x268>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <main+0x250>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f62:	ee17 2a90 	vmov	r2, s15
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  if (Diff2 == 0)
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <main+0x260>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f af31 	bne.w	8000dd4 <main+0x84>
			  {
				  G = 3;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <main+0x27c>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <main+0x250>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f80:	e728      	b.n	8000dd4 <main+0x84>
 8000f82:	bf00      	nop
 8000f84:	200001d8 	.word	0x200001d8
 8000f88:	2000002c 	.word	0x2000002c
 8000f8c:	20000298 	.word	0x20000298
 8000f90:	200002a0 	.word	0x200002a0
 8000f94:	41700000 	.word	0x41700000
 8000f98:	39d1b717 	.word	0x39d1b717
 8000f9c:	2000018c 	.word	0x2000018c
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	20000288 	.word	0x20000288
 8000fa8:	200002d4 	.word	0x200002d4
 8000fac:	200002d0 	.word	0x200002d0
 8000fb0:	200002e8 	.word	0x200002e8
 8000fb4:	200002ec 	.word	0x200002ec
 8000fb8:	200002d8 	.word	0x200002d8
 8000fbc:	461c3c00 	.word	0x461c3c00
 8000fc0:	461c3c00 	.word	0x461c3c00
 8000fc4:	c61c3c00 	.word	0xc61c3c00
 8000fc8:	c61c3c00 	.word	0xc61c3c00
 8000fcc:	200002e0 	.word	0x200002e0
 8000fd0:	48000400 	.word	0x48000400
			  }
		  }
	  }
	  else if (check == 2)
 8000fd4:	4ba2      	ldr	r3, [pc, #648]	; (8001260 <main+0x510>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	f040 80d9 	bne.w	8001190 <main+0x440>
	  {
		  NO2();
 8000fde:	f000 fd47 	bl	8001a70 <NO2>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <main+0x514>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	635a      	str	r2, [r3, #52]	; 0x34
		  setposition = Gain;
 8000fea:	4b9f      	ldr	r3, [pc, #636]	; (8001268 <main+0x518>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a9f      	ldr	r2, [pc, #636]	; (800126c <main+0x51c>)
 8000ff0:	6013      	str	r3, [r2, #0]
		  position = QEIReadRaw;
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	; (8001270 <main+0x520>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffe:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <main+0x524>)
 8001000:	edc3 7a00 	vstr	s15, [r3]
		  Diff = Gain - QEIReadRaw;
 8001004:	4b98      	ldr	r3, [pc, #608]	; (8001268 <main+0x518>)
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	4b99      	ldr	r3, [pc, #612]	; (8001270 <main+0x520>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101e:	ee17 2a90 	vmov	r2, s15
 8001022:	4b95      	ldr	r3, [pc, #596]	; (8001278 <main+0x528>)
 8001024:	601a      	str	r2, [r3, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8001026:	f001 f88f 	bl	8002148 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	4b93      	ldr	r3, [pc, #588]	; (800127c <main+0x52c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	f67f aecf 	bls.w	8000dd4 <main+0x84>
		  {
			  timestamp = HAL_GetTick()+1;
 8001036:	f001 f887 	bl	8002148 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	3301      	adds	r3, #1
 800103e:	4a8f      	ldr	r2, [pc, #572]	; (800127c <main+0x52c>)
 8001040:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - position);
 8001042:	4b8a      	ldr	r3, [pc, #552]	; (800126c <main+0x51c>)
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <main+0x524>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001052:	4b8b      	ldr	r3, [pc, #556]	; (8001280 <main+0x530>)
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	edd7 7a02 	vldr	s15, [r7, #8]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edd3 6a01 	vldr	s13, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 7a03 	vldr	s15, [r3, #12]
 8001074:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001078:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 7a04 	vldr	s15, [r3, #16]
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	615a      	str	r2, [r3, #20]
    return (out);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a73      	ldr	r2, [pc, #460]	; (8001284 <main+0x534>)
 80010b6:	6013      	str	r3, [r2, #0]
			  if (Vfeedback > 19999)
 80010b8:	4b72      	ldr	r3, [pc, #456]	; (8001284 <main+0x534>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001288 <main+0x538>
 80010c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	dd02      	ble.n	80010d2 <main+0x382>
			  {
				  Vfeedback = 19999;
 80010cc:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <main+0x534>)
 80010ce:	4a6f      	ldr	r2, [pc, #444]	; (800128c <main+0x53c>)
 80010d0:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback > 0 && Vfeedback < 1500)
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <main+0x534>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	dd0c      	ble.n	80010fc <main+0x3ac>
 80010e2:	4b68      	ldr	r3, [pc, #416]	; (8001284 <main+0x534>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001290 <main+0x540>
 80010ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d502      	bpl.n	80010fc <main+0x3ac>
			  {
				  Vfeedback = 1500;
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <main+0x534>)
 80010f8:	4a66      	ldr	r2, [pc, #408]	; (8001294 <main+0x544>)
 80010fa:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback < 0 && Vfeedback > -1500)
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <main+0x534>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d50c      	bpl.n	8001126 <main+0x3d6>
 800110c:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <main+0x534>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001298 <main+0x548>
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dd02      	ble.n	8001126 <main+0x3d6>
			  {
				  Vfeedback = -1500;
 8001120:	4b58      	ldr	r3, [pc, #352]	; (8001284 <main+0x534>)
 8001122:	4a5e      	ldr	r2, [pc, #376]	; (800129c <main+0x54c>)
 8001124:	601a      	str	r2, [r3, #0]
			  }
			  if (Diff < 0)
 8001126:	4b54      	ldr	r3, [pc, #336]	; (8001278 <main+0x528>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da10      	bge.n	8001150 <main+0x400>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <main+0x550>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -Vfeedback);
 8001136:	4b53      	ldr	r3, [pc, #332]	; (8001284 <main+0x534>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eef1 7a67 	vneg.f32	s15, s15
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <main+0x550>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001148:	ee17 2a90 	vmov	r2, s15
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
 800114e:	e011      	b.n	8001174 <main+0x424>
			  }

			  else if (Diff > 0)
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <main+0x528>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd0d      	ble.n	8001174 <main+0x424>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Vfeedback);
 8001158:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <main+0x534>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <main+0x550>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <main+0x550>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  if (Diff == 0)
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <main+0x528>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae2b 	bne.w	8000dd4 <main+0x84>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <main+0x550>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <main+0x550>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
 800118e:	e621      	b.n	8000dd4 <main+0x84>
			  }
		  }
	  }
	  else
	  {
		  NO3();
 8001190:	f000 fcd4 	bl	8001b3c <NO3>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001194:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <main+0x550>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <main+0x550>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38

		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 80011a4:	f000 ffd0 	bl	8002148 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <main+0x554>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d922      	bls.n	80011f8 <main+0x4a8>
		  {
		  timestamp = HAL_GetTick()+5;
 80011b2:	f000 ffc9 	bl	8002148 <HAL_GetTick>
 80011b6:	4603      	mov	r3, r0
 80011b8:	3305      	adds	r3, #5
 80011ba:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <main+0x554>)
 80011bc:	6013      	str	r3, [r2, #0]

		  data_packet[1] = (uint8_t)(ADC_RawRead[2] & 0x00FF); // Mask with 0x00FF to get LSB
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <main+0x558>)
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <main+0x55c>)
 80011c6:	705a      	strb	r2, [r3, #1]
		  data_packet[2]  = (uint8_t)(ADC_RawRead[2] >> 8)& 0x00FF; // Shift right 8 bits to get MSB
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <main+0x558>)
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <main+0x55c>)
 80011d4:	709a      	strb	r2, [r3, #2]

		  // Transmit data over UART
		  for (int i = 0; i < sizeof(data_packet); i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e00a      	b.n	80011f2 <main+0x4a2>
		  {
			HAL_UART_Transmit(&hlpuart1, &data_packet[i], 1, 5);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4a33      	ldr	r2, [pc, #204]	; (80012ac <main+0x55c>)
 80011e0:	1899      	adds	r1, r3, r2
 80011e2:	2305      	movs	r3, #5
 80011e4:	2201      	movs	r2, #1
 80011e6:	4832      	ldr	r0, [pc, #200]	; (80012b0 <main+0x560>)
 80011e8:	f005 fd86 	bl	8006cf8 <HAL_UART_Transmit>
		  for (int i = 0; i < sizeof(data_packet); i++)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	3301      	adds	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d9f1      	bls.n	80011dc <main+0x48c>
//		  for (int i = 0; i < sizeof(data_packet); i++)
//		  {
//			HAL_UART_Transmit(&hlpuart1, &data_packet[i], 1, 5);
//		  }

		  HAL_UART_Receive(&hlpuart1, Rx, 10, 5);
 80011f8:	2305      	movs	r3, #5
 80011fa:	220a      	movs	r2, #10
 80011fc:	492d      	ldr	r1, [pc, #180]	; (80012b4 <main+0x564>)
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <main+0x560>)
 8001200:	f005 fe08 	bl	8006e14 <HAL_UART_Receive>

		  c = (uint16_t)(Rx[2]<< 8) + (uint8_t)(Rx[1]);
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <main+0x564>)
 8001206:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800120a:	b29b      	uxth	r3, r3
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <main+0x564>)
 8001212:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <main+0x568>)
 8001222:	801a      	strh	r2, [r3, #0]

		  if (c < 0)
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <main+0x568>)
 8001226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da4a      	bge.n	80012c4 <main+0x574>
		  {
			  G = 1;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <main+0x56c>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f003 f92d 	bl	800449c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <main+0x570>)
 800124a:	f003 f927 	bl	800449c <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -c);
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <main+0x568>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	425a      	negs	r2, r3
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <main+0x514>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
 800125c:	e04d      	b.n	80012fa <main+0x5aa>
 800125e:	bf00      	nop
 8001260:	20000288 	.word	0x20000288
 8001264:	20000224 	.word	0x20000224
 8001268:	200002dc 	.word	0x200002dc
 800126c:	200002c8 	.word	0x200002c8
 8001270:	2000028c 	.word	0x2000028c
 8001274:	200002c4 	.word	0x200002c4
 8001278:	200002e4 	.word	0x200002e4
 800127c:	200002f0 	.word	0x200002f0
 8001280:	200002a0 	.word	0x200002a0
 8001284:	200002cc 	.word	0x200002cc
 8001288:	469c3e00 	.word	0x469c3e00
 800128c:	469c3e00 	.word	0x469c3e00
 8001290:	44bb8000 	.word	0x44bb8000
 8001294:	44bb8000 	.word	0x44bb8000
 8001298:	c4bb8000 	.word	0xc4bb8000
 800129c:	c4bb8000 	.word	0xc4bb8000
 80012a0:	2000018c 	.word	0x2000018c
 80012a4:	200002f4 	.word	0x200002f4
 80012a8:	20000298 	.word	0x20000298
 80012ac:	20000000 	.word	0x20000000
 80012b0:	200000f8 	.word	0x200000f8
 80012b4:	20000270 	.word	0x20000270
 80012b8:	20000284 	.word	0x20000284
 80012bc:	200002e0 	.word	0x200002e0
 80012c0:	48000400 	.word	0x48000400
		  }
		  else if (c > 0)
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <main+0x5c8>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dd15      	ble.n	80012fa <main+0x5aa>
		  {
			  G = 2;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <main+0x5cc>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f003 f8dd 	bl	800449c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <main+0x5d0>)
 80012ea:	f003 f8d7 	bl	800449c <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, c);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <main+0x5c8>)
 80012f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <main+0x5d4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  if (c == 0)
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <main+0x5c8>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f ad67 	bne.w	8000dd4 <main+0x84>
		  {
			  G = 3;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <main+0x5cc>)
 8001308:	2203      	movs	r2, #3
 800130a:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <main+0x5d4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
	  if (check == 1)
 8001314:	e55e      	b.n	8000dd4 <main+0x84>
 8001316:	bf00      	nop
 8001318:	20000284 	.word	0x20000284
 800131c:	200002e0 	.word	0x200002e0
 8001320:	48000400 	.word	0x48000400
 8001324:	20000224 	.word	0x20000224

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2238      	movs	r2, #56	; 0x38
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f006 fc88 	bl	8007c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800134a:	2000      	movs	r0, #0
 800134c:	f003 f8f0 	bl	8004530 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001366:	2304      	movs	r3, #4
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800136a:	2355      	movs	r3, #85	; 0x55
 800136c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f98a 	bl	8004698 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800138a:	f000 fc0f 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2303      	movs	r3, #3
 8001394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fc88 	bl	8004cbc <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013b2:	f000 fbfb 	bl	8001bac <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 fc37 	bl	8007c4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <MX_ADC1_Init+0x120>)
 80013e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_ADC1_Init+0x120>)
 80013e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_ADC1_Init+0x120>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_ADC1_Init+0x120>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_ADC1_Init+0x120>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001402:	2201      	movs	r2, #1
 8001404:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001408:	2204      	movs	r2, #4
 800140a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_ADC1_Init+0x120>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001414:	2201      	movs	r2, #1
 8001416:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_ADC1_Init+0x120>)
 800141a:	2203      	movs	r2, #3
 800141c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_ADC1_Init+0x120>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC1_Init+0x120>)
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001448:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_ADC1_Init+0x120>)
 800144a:	f001 f8ef 	bl	800262c <HAL_ADC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001454:	f000 fbaa 	bl	8001bac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	481f      	ldr	r0, [pc, #124]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001464:	f002 fa0e 	bl	8003884 <HAL_ADCEx_MultiModeConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800146e:	f000 fb9d 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_ADC1_Init+0x124>)
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001476:	2306      	movs	r3, #6
 8001478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147a:	2307      	movs	r3, #7
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800147e:	237f      	movs	r3, #127	; 0x7f
 8001480:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001482:	2304      	movs	r3, #4
 8001484:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_ADC1_Init+0x120>)
 8001490:	f001 fb7a 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800149a:	f000 fb87 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_ADC1_Init+0x128>)
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014a2:	230c      	movs	r3, #12
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_ADC1_Init+0x120>)
 80014ac:	f001 fb6c 	bl	8002b88 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80014b6:	f000 fb79 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_ADC1_Init+0x12c>)
 80014bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014be:	2312      	movs	r3, #18
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_ADC1_Init+0x120>)
 80014c8:	f001 fb5e 	bl	8002b88 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80014d2:	f000 fb6b 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	; 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000002c 	.word	0x2000002c
 80014e4:	04300002 	.word	0x04300002
 80014e8:	08600004 	.word	0x08600004
 80014ec:	3ef08000 	.word	0x3ef08000

080014f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 80014f6:	4a22      	ldr	r2, [pc, #136]	; (8001580 <MX_LPUART1_UART_Init+0x90>)
 80014f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001534:	f005 fb90 	bl	8006c58 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 fb35 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001546:	f006 fa81 	bl	8007a4c <HAL_UARTEx_SetTxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001550:	f000 fb2c 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001558:	f006 fab6 	bl	8007ac8 <HAL_UARTEx_SetRxFifoThreshold>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001562:	f000 fb23 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_LPUART1_UART_Init+0x8c>)
 8001568:	f006 fa37 	bl	80079da <HAL_UARTEx_DisableFifoMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001572:	f000 fb1b 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200000f8 	.word	0x200000f8
 8001580:	40008000 	.word	0x40008000

08001584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	; 0x70
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2234      	movs	r2, #52	; 0x34
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f006 fb44 	bl	8007c4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015c6:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <MX_TIM1_Init+0x174>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015cc:	22a9      	movs	r2, #169	; 0xa9
 80015ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f0:	4840      	ldr	r0, [pc, #256]	; (80016f4 <MX_TIM1_Init+0x170>)
 80015f2:	f003 ffcd 	bl	8005590 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 fad6 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800160a:	4619      	mov	r1, r3
 800160c:	4839      	ldr	r0, [pc, #228]	; (80016f4 <MX_TIM1_Init+0x170>)
 800160e:	f004 fc43 	bl	8005e98 <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001618:	f000 fac8 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161c:	4835      	ldr	r0, [pc, #212]	; (80016f4 <MX_TIM1_Init+0x170>)
 800161e:	f004 f87f 	bl	8005720 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001628:	f000 fac0 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800163c:	4619      	mov	r1, r3
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <MX_TIM1_Init+0x170>)
 8001640:	f005 f9e0 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800164a:	f000 faaf 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164e:	2360      	movs	r3, #96	; 0x60
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	4820      	ldr	r0, [pc, #128]	; (80016f4 <MX_TIM1_Init+0x170>)
 8001674:	f004 fafc 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800167e:	f000 fa95 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001686:	2204      	movs	r2, #4
 8001688:	4619      	mov	r1, r3
 800168a:	481a      	ldr	r0, [pc, #104]	; (80016f4 <MX_TIM1_Init+0x170>)
 800168c:	f004 faf0 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001696:	f000 fa89 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM1_Init+0x170>)
 80016d8:	f005 fa2a 	bl	8006b30 <HAL_TIMEx_ConfigBreakDeadTime>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80016e2:	f000 fa63 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM1_Init+0x170>)
 80016e8:	f000 fbf4 	bl	8001ed4 <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3770      	adds	r7, #112	; 0x70
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000018c 	.word	0x2000018c
 80016f8:	40012c00 	.word	0x40012c00

080016fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f006 fa9e 	bl	8007c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_TIM3_Init+0xa8>)
 800171e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800172e:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001740:	2303      	movs	r3, #3
 8001742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800176c:	f004 f94c 	bl	8005a08 <HAL_TIM_Encoder_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001776:	f000 fa19 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001788:	f005 f93c 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001792:	f000 fa0b 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001d8 	.word	0x200001d8
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017dc:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <MX_TIM4_Init+0xec>)
 80017de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017e2:	22a9      	movs	r2, #169	; 0xa9
 80017e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32676;
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017ee:	f647 72a4 	movw	r2, #32676	; 0x7fa4
 80017f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <MX_TIM4_Init+0xe8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <MX_TIM4_Init+0xe8>)
 8001802:	f003 fec5 	bl	8005590 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800180c:	f000 f9ce 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	4619      	mov	r1, r3
 800181c:	481c      	ldr	r0, [pc, #112]	; (8001890 <MX_TIM4_Init+0xe8>)
 800181e:	f004 fb3b 	bl	8005e98 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001828:	f000 f9c0 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800182c:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_TIM4_Init+0xe8>)
 800182e:	f003 ff77 	bl	8005720 <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001838:	f000 f9b8 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <MX_TIM4_Init+0xe8>)
 800184c:	f005 f8da 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001856:	f000 f9a9 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	; 0x60
 800185c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <MX_TIM4_Init+0xe8>)
 8001872:	f004 f9fd 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800187c:	f000 f996 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_TIM4_Init+0xe8>)
 8001882:	f000 fb27 	bl	8001ed4 <HAL_TIM_MspPostInit>

}
 8001886:	bf00      	nop
 8001888:	3738      	adds	r7, #56	; 0x38
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000224 	.word	0x20000224
 8001894:	40000800 	.word	0x40000800

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_DMA_Init+0x50>)
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <MX_DMA_Init+0x50>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6493      	str	r3, [r2, #72]	; 0x48
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_DMA_Init+0x50>)
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_DMA_Init+0x50>)
 80018b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <MX_DMA_Init+0x50>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6493      	str	r3, [r2, #72]	; 0x48
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_DMA_Init+0x50>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	200b      	movs	r0, #11
 80018d4:	f002 f9b9 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d8:	200b      	movs	r0, #11
 80018da:	f002 f9d0 	bl	8003c7e <HAL_NVIC_EnableIRQ>

}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a3a      	ldr	r2, [pc, #232]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <MX_GPIO_Init+0x104>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MX_GPIO_Init+0x104>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <MX_GPIO_Init+0x104>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f002 fd96 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001976:	481f      	ldr	r0, [pc, #124]	; (80019f4 <MX_GPIO_Init+0x108>)
 8001978:	f002 fd90 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800197c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <MX_GPIO_Init+0x10c>)
 8001994:	f002 fc00 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001998:	f44f 7390 	mov.w	r3, #288	; 0x120
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f002 fbf0 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <MX_GPIO_Init+0x108>)
 80019d2:	f002 fbe1 	bl	8004198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f002 f935 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e0:	2028      	movs	r0, #40	; 0x28
 80019e2:	f002 f94c 	bl	8003c7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	00000000 	.word	0x00000000

08001a00 <NO1>:

/* USER CODE BEGIN 4 */
void NO1()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2120      	movs	r1, #32
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f002 fd46 	bl	800449c <HAL_GPIO_WritePin>
	ADC_RawRead[0] = 0;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <NO1+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	801a      	strh	r2, [r3, #0]
	Radiant2 = (ADC_RawRead[2]*6.28)/4095.0;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <NO1+0x68>)
 8001a18:	889b      	ldrh	r3, [r3, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd4e 	bl	80004bc <__aeabi_i2d>
 8001a20:	a30d      	add	r3, pc, #52	; (adr r3, 8001a58 <NO1+0x58>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdb3 	bl	8000590 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	a30b      	add	r3, pc, #44	; (adr r3, 8001a60 <NO1+0x60>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fed4 	bl	80007e4 <__aeabi_ddiv>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7fe ffb6 	bl	80009b4 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <NO1+0x6c>)
 8001a4c:	6013      	str	r3, [r2, #0]

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	51eb851f 	.word	0x51eb851f
 8001a5c:	40191eb8 	.word	0x40191eb8
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40affe00 	.word	0x40affe00
 8001a68:	20000298 	.word	0x20000298
 8001a6c:	20000294 	.word	0x20000294

08001a70 <NO2>:

void NO2()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	// LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2120      	movs	r1, #32
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f002 fd0e 	bl	800449c <HAL_GPIO_WritePin>
	ADC_RawRead[1] = 0;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <NO2+0xb8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	805a      	strh	r2, [r3, #2]
	ADC_RawRead[2] = 0;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <NO2+0xb8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	809a      	strh	r2, [r3, #4]

	// QEI
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <NO2+0xbc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <NO2+0xc0>)
 8001a94:	6013      	str	r3, [r2, #0]
	Radiant = (QEIReadRaw*6.28)/3071.0;
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <NO2+0xc0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fcfe 	bl	800049c <__aeabi_ui2d>
 8001aa0:	a31b      	add	r3, pc, #108	; (adr r3, 8001b10 <NO2+0xa0>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fd73 	bl	8000590 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	a319      	add	r3, pc, #100	; (adr r3, 8001b18 <NO2+0xa8>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fe94 	bl	80007e4 <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7fe ff76 	bl	80009b4 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <NO2+0xc4>)
 8001acc:	6013      	str	r3, [r2, #0]

	// Scale 4095 to 3071
	Gain = (ADC_RawRead[0]*3071.0)/4095.0;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <NO2+0xb8>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcf2 	bl	80004bc <__aeabi_i2d>
 8001ad8:	a30f      	add	r3, pc, #60	; (adr r3, 8001b18 <NO2+0xa8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fd57 	bl	8000590 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a30d      	add	r3, pc, #52	; (adr r3, 8001b20 <NO2+0xb0>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fe78 	bl	80007e4 <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ff5a 	bl	80009b4 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <NO2+0xc8>)
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w
 8001b10:	51eb851f 	.word	0x51eb851f
 8001b14:	40191eb8 	.word	0x40191eb8
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40a7fe00 	.word	0x40a7fe00
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40affe00 	.word	0x40affe00
 8001b28:	20000298 	.word	0x20000298
 8001b2c:	200001d8 	.word	0x200001d8
 8001b30:	2000028c 	.word	0x2000028c
 8001b34:	20000290 	.word	0x20000290
 8001b38:	200002dc 	.word	0x200002dc

08001b3c <NO3>:
void NO3()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b40:	2120      	movs	r1, #32
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f002 fcc1 	bl	80044cc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b4a:	2064      	movs	r0, #100	; 0x64
 8001b4c:	f000 fb08 	bl	8002160 <HAL_Delay>
//	ADC1_Channel[0].data = 0;
//	ADC1_Channel[1].data = 0;
//	ADC1_Channel[2].data = 0;
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b64:	d11a      	bne.n	8001b9c <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (check == 0)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <HAL_GPIO_EXTI_Callback+0x22>
		{
			check = 1;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
		else
		{
			check = 1;
		}
	}
}
 8001b74:	e012      	b.n	8001b9c <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 1)
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d103      	bne.n	8001b86 <HAL_GPIO_EXTI_Callback+0x32>
			check = 2;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 2)
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d103      	bne.n	8001b96 <HAL_GPIO_EXTI_Callback+0x42>
			check= 3;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b90:	2203      	movs	r2, #3
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_EXTI_Callback+0x48>
			check = 1;
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000288 	.word	0x20000288

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_MspInit+0x44>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_MspInit+0x44>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_MspInit+0x44>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_MspInit+0x44>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_MspInit+0x44>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_MspInit+0x44>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bee:	f002 fd43 	bl	8004678 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0a0      	sub	sp, #128	; 0x80
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	2254      	movs	r2, #84	; 0x54
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 f813 	bl	8007c4c <memset>
  if(hadc->Instance==ADC1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d177      	bne.n	8001d20 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fa57 	bl	80050f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c4c:	f7ff ffae 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c74:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_ADC_MspInit+0x128>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f002 fa73 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4819      	ldr	r0, [pc, #100]	; (8001d2c <HAL_ADC_MspInit+0x12c>)
 8001cc6:	f002 fa67 	bl	8004198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001ccc:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_ADC_MspInit+0x134>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001d06:	f001 ffd5 	bl	8003cb4 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001d10:	f7ff ff4c 	bl	8001bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_ADC_MspInit+0x130>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3780      	adds	r7, #128	; 0x80
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	20000098 	.word	0x20000098
 8001d34:	40020008 	.word	0x40020008

08001d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09e      	sub	sp, #120	; 0x78
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2254      	movs	r2, #84	; 0x54
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f005 ff77 	bl	8007c4c <memset>
  if(huart->Instance==LPUART1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_UART_MspInit+0xa8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d136      	bne.n	8001dd6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f9bd 	bl	80050f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d80:	f7ff ff14 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_UART_MspInit+0xac>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001db4:	230c      	movs	r3, #12
 8001db6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f002 f9e1 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3778      	adds	r7, #120	; 0x78
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40008000 	.word	0x40008000
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_TIM_Base_MspInit+0x5c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10c      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e04:	6613      	str	r3, [r2, #96]	; 0x60
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e12:	e010      	b.n	8001e36 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_TIM_Base_MspInit+0x64>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10b      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_TIM_Base_MspInit+0x60>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40000800 	.word	0x40000800

08001e50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d128      	bne.n	8001ec4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f002 f96a 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_TIM_MspPostInit+0xac>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d11c      	bne.n	8001f30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <HAL_TIM_MspPostInit+0xb4>)
 8001f2a:	f002 f935 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f2e:	e022      	b.n	8001f76 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <HAL_TIM_MspPostInit+0xb8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11d      	bne.n	8001f76 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_TIM_MspPostInit+0xb0>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f64:	230a      	movs	r3, #10
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f002 f911 	bl	8004198 <HAL_GPIO_Init>
}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	40000800 	.word	0x40000800

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 f8a2 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <DMA1_Channel1_IRQHandler+0x10>)
 8001fea:	f001 ff86 	bl	8003efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000098 	.word	0x20000098

08001ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ffc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002000:	f002 fa7e 	bl	8004500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <SystemInit+0x20>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <SystemInit+0x20>)
 8002014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800202e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002030:	f7ff ffea 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <LoopForever+0x6>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	; (800206c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <LoopForever+0xe>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <LoopForever+0x12>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	; (8002078 <LoopForever+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800205a:	f005 fdff 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800205e:	f7fe fe77 	bl	8000d50 <main>

08002062 <LoopForever>:

LoopForever:
    b LoopForever
 8002062:	e7fe      	b.n	8002062 <LoopForever>
  ldr   r0, =_estack
 8002064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002070:	08007d0c 	.word	0x08007d0c
  ldr r2, =_sbss
 8002074:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002078:	200002fc 	.word	0x200002fc

0800207c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC1_2_IRQHandler>

0800207e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f001 fdd3 	bl	8003c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f80e 	bl	80020b0 <HAL_InitTick>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	e001      	b.n	80020a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a0:	f7ff fd8a 	bl	8001bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020a4:	79fb      	ldrb	r3, [r7, #7]

}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020bc:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_InitTick+0x68>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d022      	beq.n	800210a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_InitTick+0x6c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_InitTick+0x68>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fdde 	bl	8003c9a <HAL_SYSTICK_Config>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10f      	bne.n	8002104 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d809      	bhi.n	80020fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ea:	2200      	movs	r2, #0
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295
 80020f2:	f001 fdaa 	bl	8003c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_InitTick+0x70>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e007      	b.n	800210e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e004      	b.n	800210e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000000c 	.word	0x2000000c
 800211c:	20000004 	.word	0x20000004
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4413      	add	r3, r2
 8002132:	4a03      	ldr	r2, [pc, #12]	; (8002140 <HAL_IncTick+0x1c>)
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	200002f8 	.word	0x200002f8
 8002144:	2000000c 	.word	0x2000000c

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	200002f8 	.word	0x200002f8

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d004      	beq.n	8002184 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_Delay+0x40>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002184:	bf00      	nop
 8002186:	f7ff ffdf 	bl	8002148 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d8f7      	bhi.n	8002186 <HAL_Delay+0x26>
  {
  }
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3360      	adds	r3, #96	; 0x60
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <LL_ADC_SetOffset+0x44>)
 800222e:	4013      	ands	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	4313      	orrs	r3, r2
 800223c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	03fff000 	.word	0x03fff000

08002254 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3360      	adds	r3, #96	; 0x60
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3360      	adds	r3, #96	; 0x60
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	431a      	orrs	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3360      	adds	r3, #96	; 0x60
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	615a      	str	r2, [r3, #20]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3330      	adds	r3, #48	; 0x30
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	4413      	add	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	211f      	movs	r1, #31
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	401a      	ands	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 011f 	and.w	r1, r3, #31
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b087      	sub	sp, #28
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3314      	adds	r3, #20
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0e5b      	lsrs	r3, r3, #25
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	0d1b      	lsrs	r3, r3, #20
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2107      	movs	r1, #7
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	401a      	ands	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	0d1b      	lsrs	r3, r3, #20
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	431a      	orrs	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0318 	and.w	r3, r3, #24
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002440:	40d9      	lsrs	r1, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	400b      	ands	r3, r1
 8002446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	0007ffff 	.word	0x0007ffff

08002464 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 031f 	and.w	r3, r3, #31
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6093      	str	r3, [r2, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b8:	d101      	bne.n	80024be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002508:	d101      	bne.n	800250e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	f043 0202 	orr.w	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <LL_ADC_IsEnabled+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_ADC_IsEnabled+0x1a>
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d101      	bne.n	80025aa <LL_ADC_IsDisableOngoing+0x18>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_IsDisableOngoing+0x1a>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025cc:	f043 0204 	orr.w	r2, r3, #4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d101      	bne.n	80025f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d101      	bne.n	800261e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1a9      	b.n	800299a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fad3 	bl	8001c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff19 	bl	80024a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff feff 	bl	8002480 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff34 	bl	80024f4 <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff18 	bl	80024cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269c:	4b9c      	ldr	r3, [pc, #624]	; (8002910 <HAL_ADC_Init+0x2e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	4a9c      	ldr	r2, [pc, #624]	; (8002914 <HAL_ADC_Init+0x2e8>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff16 	bl	80024f4 <LL_ADC_IsInternalRegulatorEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff76 	bl	80025e0 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8142 	bne.w	8002988 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 813e 	bne.w	8002988 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002714:	f043 0202 	orr.w	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff23 	bl	800256c <LL_ADC_IsEnabled>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d141      	bne.n	80027b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d004      	beq.n	8002740 <HAL_ADC_Init+0x114>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a77      	ldr	r2, [pc, #476]	; (8002918 <HAL_ADC_Init+0x2ec>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10f      	bne.n	8002760 <HAL_ADC_Init+0x134>
 8002740:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002744:	f7ff ff12 	bl	800256c <LL_ADC_IsEnabled>
 8002748:	4604      	mov	r4, r0
 800274a:	4873      	ldr	r0, [pc, #460]	; (8002918 <HAL_ADC_Init+0x2ec>)
 800274c:	f7ff ff0e 	bl	800256c <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	4323      	orrs	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_ADC_Init+0x15a>
 8002760:	486e      	ldr	r0, [pc, #440]	; (800291c <HAL_ADC_Init+0x2f0>)
 8002762:	f7ff ff03 	bl	800256c <LL_ADC_IsEnabled>
 8002766:	4604      	mov	r4, r0
 8002768:	486d      	ldr	r0, [pc, #436]	; (8002920 <HAL_ADC_Init+0x2f4>)
 800276a:	f7ff feff 	bl	800256c <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	431c      	orrs	r4, r3
 8002772:	486c      	ldr	r0, [pc, #432]	; (8002924 <HAL_ADC_Init+0x2f8>)
 8002774:	f7ff fefa 	bl	800256c <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	4323      	orrs	r3, r4
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002792:	d004      	beq.n	800279e <HAL_ADC_Init+0x172>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5f      	ldr	r2, [pc, #380]	; (8002918 <HAL_ADC_Init+0x2ec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Init+0x176>
 800279e:	4a62      	ldr	r2, [pc, #392]	; (8002928 <HAL_ADC_Init+0x2fc>)
 80027a0:	e000      	b.n	80027a4 <HAL_ADC_Init+0x178>
 80027a2:	4a62      	ldr	r2, [pc, #392]	; (800292c <HAL_ADC_Init+0x300>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7ff fcfa 	bl	80021a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7f5b      	ldrb	r3, [r3, #29]
 80027b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	045b      	lsls	r3, r3, #17
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b48      	ldr	r3, [pc, #288]	; (8002930 <HAL_ADC_Init+0x304>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	430b      	orrs	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fee5 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 800283c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d17f      	bne.n	8002944 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d17c      	bne.n	8002944 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800284e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002856:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002866:	f023 0302 	bic.w	r3, r3, #2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	430b      	orrs	r3, r1
 8002872:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800288a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002894:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6911      	ldr	r1, [r2, #16]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028aa:	e013      	b.n	80028d4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12a      	bne.n	8002934 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028f4:	4311      	orrs	r1, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002900:	430a      	orrs	r2, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e019      	b.n	8002944 <HAL_ADC_Init+0x318>
 8002910:	20000004 	.word	0x20000004
 8002914:	053e2d63 	.word	0x053e2d63
 8002918:	50000100 	.word	0x50000100
 800291c:	50000400 	.word	0x50000400
 8002920:	50000500 	.word	0x50000500
 8002924:	50000600 	.word	0x50000600
 8002928:	50000300 	.word	0x50000300
 800292c:	50000700 	.word	0x50000700
 8002930:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10c      	bne.n	8002966 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f023 010f 	bic.w	r1, r3, #15
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
 8002964:	e007      	b.n	8002976 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 020f 	bic.w	r2, r2, #15
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c
 8002986:	e007      	b.n	8002998 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002998:	7ffb      	ldrb	r3, [r7, #31]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop

080029a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_Start_DMA+0x20>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5a      	ldr	r2, [pc, #360]	; (8002b28 <HAL_ADC_Start_DMA+0x184>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x24>
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_ADC_Start_DMA+0x188>)
 80029c6:	e000      	b.n	80029ca <HAL_ADC_Start_DMA+0x26>
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_ADC_Start_DMA+0x18c>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fd4a 	bl	8002464 <LL_ADC_GetMultimode>
 80029d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fe02 	bl	80025e0 <LL_ADC_REG_IsConversionOngoing>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 809b 	bne.w	8002b1a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Start_DMA+0x4e>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e096      	b.n	8002b20 <HAL_ADC_Start_DMA+0x17c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a4d      	ldr	r2, [pc, #308]	; (8002b34 <HAL_ADC_Start_DMA+0x190>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d008      	beq.n	8002a16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d002      	beq.n	8002a16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d17a      	bne.n	8002b0c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fcf6 	bl	8003408 <ADC_Enable>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d16d      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_ADC_Start_DMA+0x184>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_ADC_Start_DMA+0xb4>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <HAL_ADC_Start_DMA+0x194>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d002      	beq.n	8002a54 <HAL_ADC_Start_DMA+0xb0>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_Start_DMA+0xb8>
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_ADC_Start_DMA+0x198>)
 8002a56:	e001      	b.n	8002a5c <HAL_ADC_Start_DMA+0xb8>
 8002a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d002      	beq.n	8002a6a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f023 0206 	bic.w	r2, r3, #6
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_ADC_Start_DMA+0x19c>)
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_ADC_Start_DMA+0x1a0>)
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_ADC_Start_DMA+0x1a4>)
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	221c      	movs	r2, #28
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0210 	orr.w	r2, r2, #16
 8002acc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3340      	adds	r3, #64	; 0x40
 8002ae8:	4619      	mov	r1, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f001 f989 	bl	8003e04 <HAL_DMA_Start_IT>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd5c 	bl	80025b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b00:	e00d      	b.n	8002b1e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002b0a:	e008      	b.n	8002b1e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b18:	e001      	b.n	8002b1e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	50000100 	.word	0x50000100
 8002b2c:	50000300 	.word	0x50000300
 8002b30:	50000700 	.word	0x50000700
 8002b34:	50000600 	.word	0x50000600
 8002b38:	50000500 	.word	0x50000500
 8002b3c:	50000400 	.word	0x50000400
 8002b40:	080035f3 	.word	0x080035f3
 8002b44:	080036cb 	.word	0x080036cb
 8002b48:	080036e7 	.word	0x080036e7

08002b4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0b6      	sub	sp, #216	; 0xd8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x24>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f000 bc13 	b.w	80033d2 <HAL_ADC_ConfigChannel+0x84a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fd11 	bl	80025e0 <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 83f3 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff fbcb 	bl	800236e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fcff 	bl	80025e0 <LL_ADC_REG_IsConversionOngoing>
 8002be2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fd0b 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 8002bf0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 81d9 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 81d4 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c10:	d10f      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7ff fbd2 	bl	80023c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb79 	bl	8002322 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c30:	e00e      	b.n	8002c50 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f7ff fbc1 	bl	80023c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fb69 	bl	8002322 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d022      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c82:	f7ff fac3 	bl	800220c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6919      	ldr	r1, [r3, #16]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7ff fb0f 	bl	80022b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x126>
 8002ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x128>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f7ff fb1b 	bl	80022ec <LL_ADC_SetOffsetSaturation>
 8002cb6:	e17b      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fac8 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x15c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fabd 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	e01e      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x19a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fab2 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x1b2>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	e018      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1e4>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fa81 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fa65 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x222>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fa5a 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	e01e      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x260>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fa4f 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002dc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x278>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	e018      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x2aa>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e004      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fa1e 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fa02 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x2e8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f9f7 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	e01e      	b.n	8002eae <HAL_ADC_ConfigChannel+0x326>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f9ec 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x33e>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	e016      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x36c>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f9bd 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f9a1 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x3aa>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f996 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e017      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x3da>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2103      	movs	r1, #3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f98b 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x3f2>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	e011      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x416>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2103      	movs	r1, #3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f968 	bl	8002280 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fad9 	bl	800256c <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 813d 	bne.w	800323c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f7ff fa24 	bl	800241c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4aa2      	ldr	r2, [pc, #648]	; (8003264 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 812e 	bne.w	800323c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x480>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e019      	b.n	800303c <HAL_ADC_ConfigChannel+0x4b4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003018:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b09      	cmp	r3, #9
 8003034:	bf94      	ite	ls
 8003036:	2301      	movls	r3, #1
 8003038:	2300      	movhi	r3, #0
 800303a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303c:	2b00      	cmp	r3, #0
 800303e:	d079      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x4d4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800305a:	e015      	b.n	8003088 <HAL_ADC_ConfigChannel+0x500>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e003      	b.n	8003080 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x520>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	e017      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x550>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e003      	b.n	80030cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	ea42 0103 	orr.w	r1, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x576>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	051b      	lsls	r3, r3, #20
 80030fc:	e018      	b.n	8003130 <HAL_ADC_ConfigChannel+0x5a8>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3301      	adds	r3, #1
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	430b      	orrs	r3, r1
 8003132:	e07e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x5c8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	e015      	b.n	800317c <HAL_ADC_ConfigChannel+0x5f4>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_ConfigChannel+0x614>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	e017      	b.n	80031cc <HAL_ADC_ConfigChannel+0x644>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	61fb      	str	r3, [r7, #28]
  return result;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	ea42 0103 	orr.w	r1, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x670>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	3b1e      	subs	r3, #30
 80031f0:	051b      	lsls	r3, r3, #20
 80031f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031f6:	e01b      	b.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	613b      	str	r3, [r7, #16]
  return result;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003230:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003236:	4619      	mov	r1, r3
 8003238:	f7ff f8c5 	bl	80023c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_ADC_ConfigChannel+0x6e0>)
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80be 	beq.w	80033c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d004      	beq.n	800325e <HAL_ADC_ConfigChannel+0x6d6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_ADC_ConfigChannel+0x6e4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10a      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x6ec>
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_ADC_ConfigChannel+0x6e8>)
 8003260:	e009      	b.n	8003276 <HAL_ADC_ConfigChannel+0x6ee>
 8003262:	bf00      	nop
 8003264:	407f0000 	.word	0x407f0000
 8003268:	80080000 	.word	0x80080000
 800326c:	50000100 	.word	0x50000100
 8003270:	50000300 	.word	0x50000300
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_ADC_ConfigChannel+0x854>)
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe ffba 	bl	80021f0 <LL_ADC_GetCommonPathInternalCh>
 800327c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a56      	ldr	r2, [pc, #344]	; (80033e0 <HAL_ADC_ConfigChannel+0x858>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x70c>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_ADC_ConfigChannel+0x85c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d13a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d134      	bne.n	800330a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a8:	d005      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x72e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4e      	ldr	r2, [pc, #312]	; (80033e8 <HAL_ADC_ConfigChannel+0x860>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f040 8085 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032be:	d004      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x742>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a49      	ldr	r2, [pc, #292]	; (80033ec <HAL_ADC_ConfigChannel+0x864>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x746>
 80032ca:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <HAL_ADC_ConfigChannel+0x868>)
 80032cc:	e000      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x748>
 80032ce:	4a43      	ldr	r2, [pc, #268]	; (80033dc <HAL_ADC_ConfigChannel+0x854>)
 80032d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7fe ff75 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_ADC_ConfigChannel+0x86c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	4a44      	ldr	r2, [pc, #272]	; (80033f8 <HAL_ADC_ConfigChannel+0x870>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032fa:	e002      	b.n	8003302 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3b01      	subs	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f9      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003308:	e05a      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3b      	ldr	r2, [pc, #236]	; (80033fc <HAL_ADC_ConfigChannel+0x874>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d125      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11f      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_ADC_ConfigChannel+0x864>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d104      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x7ac>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a34      	ldr	r2, [pc, #208]	; (8003400 <HAL_ADC_ConfigChannel+0x878>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d047      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333c:	d004      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x7c0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_ADC_ConfigChannel+0x864>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x7c4>
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_ADC_ConfigChannel+0x868>)
 800334a:	e000      	b.n	800334e <HAL_ADC_ConfigChannel+0x7c6>
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <HAL_ADC_ConfigChannel+0x854>)
 800334e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7fe ff36 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800335e:	e031      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_ADC_ConfigChannel+0x87c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d12d      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800336a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d127      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_ADC_ConfigChannel+0x864>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003388:	d004      	beq.n	8003394 <HAL_ADC_ConfigChannel+0x80c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_ADC_ConfigChannel+0x864>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x810>
 8003394:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_ADC_ConfigChannel+0x868>)
 8003396:	e000      	b.n	800339a <HAL_ADC_ConfigChannel+0x812>
 8003398:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_ADC_ConfigChannel+0x854>)
 800339a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800339e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fe ff10 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
 80033aa:	e00c      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033be:	e002      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	37d8      	adds	r7, #216	; 0xd8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	50000700 	.word	0x50000700
 80033e0:	c3210000 	.word	0xc3210000
 80033e4:	90c00010 	.word	0x90c00010
 80033e8:	50000600 	.word	0x50000600
 80033ec:	50000100 	.word	0x50000100
 80033f0:	50000300 	.word	0x50000300
 80033f4:	20000004 	.word	0x20000004
 80033f8:	053e2d63 	.word	0x053e2d63
 80033fc:	c7520000 	.word	0xc7520000
 8003400:	50000500 	.word	0x50000500
 8003404:	cb840000 	.word	0xcb840000

08003408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f8a7 	bl	800256c <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d176      	bne.n	8003512 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	4b3c      	ldr	r3, [pc, #240]	; (800351c <ADC_Enable+0x114>)
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e062      	b.n	8003514 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f862 	bl	800251c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d004      	beq.n	800346c <ADC_Enable+0x64>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <ADC_Enable+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <ADC_Enable+0x68>
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <ADC_Enable+0x11c>)
 800346e:	e000      	b.n	8003472 <ADC_Enable+0x6a>
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <ADC_Enable+0x120>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe febc 	bl	80021f0 <LL_ADC_GetCommonPathInternalCh>
 8003478:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800347a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <ADC_Enable+0x124>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <ADC_Enable+0x128>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800349c:	e002      	b.n	80034a4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034aa:	f7fe fe4d 	bl	8002148 <HAL_GetTick>
 80034ae:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b0:	e028      	b.n	8003504 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f858 	bl	800256c <LL_ADC_IsEnabled>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f828 	bl	800251c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034cc:	f7fe fe3c 	bl	8002148 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d914      	bls.n	8003504 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d00d      	beq.n	8003504 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f043 0210 	orr.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e007      	b.n	8003514 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d1cf      	bne.n	80034b2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	8000003f 	.word	0x8000003f
 8003520:	50000100 	.word	0x50000100
 8003524:	50000300 	.word	0x50000300
 8003528:	50000700 	.word	0x50000700
 800352c:	20000004 	.word	0x20000004
 8003530:	053e2d63 	.word	0x053e2d63

08003534 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f826 	bl	8002592 <LL_ADC_IsDisableOngoing>
 8003546:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f80d 	bl	800256c <LL_ADC_IsEnabled>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d047      	beq.n	80035e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d144      	bne.n	80035e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030d 	and.w	r3, r3, #13
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10c      	bne.n	8003586 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ffe7 	bl	8002544 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2203      	movs	r2, #3
 800357c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800357e:	f7fe fde3 	bl	8002148 <HAL_GetTick>
 8003582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003584:	e029      	b.n	80035da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	f043 0210 	orr.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e023      	b.n	80035ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035a2:	f7fe fdd1 	bl	8002148 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d914      	bls.n	80035da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	f043 0210 	orr.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e007      	b.n	80035ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1dc      	bne.n	80035a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003608:	2b00      	cmp	r3, #0
 800360a:	d14b      	bne.n	80036a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d021      	beq.n	800366a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fe8c 	bl	8002348 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d032      	beq.n	800369c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d12b      	bne.n	800369c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11f      	bne.n	800369c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c
 8003668:	e018      	b.n	800369c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff fa55 	bl	8002b4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036a2:	e00e      	b.n	80036c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fa5f 	bl	8002b74 <HAL_ADC_ErrorCallback>
}
 80036b6:	e004      	b.n	80036c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fa41 	bl	8002b60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	f043 0204 	orr.w	r2, r3, #4
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff fa31 	bl	8002b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <LL_ADC_IsEnabled>:
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <LL_ADC_IsEnabled+0x18>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <LL_ADC_IsEnabled+0x1a>
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_StartCalibration>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003752:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800375c:	4313      	orrs	r3, r2
 800375e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	609a      	str	r2, [r3, #8]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_ADC_IsCalibrationOnGoing>:
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003786:	d101      	bne.n	800378c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_REG_IsConversionOngoing>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d101      	bne.n	80037b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_ADCEx_Calibration_Start+0x1c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e04d      	b.n	8003878 <HAL_ADCEx_Calibration_Start+0xb8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fea5 	bl	8003534 <ADC_Disable>
 80037ea:	4603      	mov	r3, r0
 80037ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d136      	bne.n	8003862 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	f043 0202 	orr.w	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff96 	bl	8003740 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003814:	e014      	b.n	8003840 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	3301      	adds	r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d90d      	bls.n	8003840 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	f023 0312 	bic.w	r3, r3, #18
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e01b      	b.n	8003878 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff94 	bl	8003772 <LL_ADC_IsCalibrationOnGoing>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e2      	bne.n	8003816 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f023 0303 	bic.w	r3, r3, #3
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003860:	e005      	b.n	800386e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	0004de01 	.word	0x0004de01

08003884 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b0a1      	sub	sp, #132	; 0x84
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e7      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038aa:	2300      	movs	r3, #0
 80038ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ae:	2300      	movs	r3, #0
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ba:	d102      	bne.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038bc:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	e009      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d102      	bne.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	e001      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0be      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff4f 	bl	800379a <LL_ADC_REG_IsConversionOngoing>
 80038fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff49 	bl	800379a <LL_ADC_REG_IsConversionOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 80a0 	bne.w	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 809c 	bne.w	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003920:	d004      	beq.n	800392c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a55      	ldr	r2, [pc, #340]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800392c:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800392e:	e000      	b.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003930:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003932:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04b      	beq.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800393c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800394e:	035b      	lsls	r3, r3, #13
 8003950:	430b      	orrs	r3, r1
 8003952:	431a      	orrs	r2, r3
 8003954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003956:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a45      	ldr	r2, [pc, #276]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10f      	bne.n	800398c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800396c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003970:	f7ff fed3 	bl	800371a <LL_ADC_IsEnabled>
 8003974:	4604      	mov	r4, r0
 8003976:	4841      	ldr	r0, [pc, #260]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003978:	f7ff fecf 	bl	800371a <LL_ADC_IsEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	4323      	orrs	r3, r4
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e012      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800398c:	483c      	ldr	r0, [pc, #240]	; (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800398e:	f7ff fec4 	bl	800371a <LL_ADC_IsEnabled>
 8003992:	4604      	mov	r4, r0
 8003994:	483b      	ldr	r0, [pc, #236]	; (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003996:	f7ff fec0 	bl	800371a <LL_ADC_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	431c      	orrs	r4, r3
 800399e:	483c      	ldr	r0, [pc, #240]	; (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039a0:	f7ff febb 	bl	800371a <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4323      	orrs	r3, r4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d056      	beq.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039be:	f023 030f 	bic.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039d2:	e047      	b.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e8:	d004      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10f      	bne.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80039f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039f8:	f7ff fe8f 	bl	800371a <LL_ADC_IsEnabled>
 80039fc:	4604      	mov	r4, r0
 80039fe:	481f      	ldr	r0, [pc, #124]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a00:	f7ff fe8b 	bl	800371a <LL_ADC_IsEnabled>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4323      	orrs	r3, r4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a14:	481a      	ldr	r0, [pc, #104]	; (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a16:	f7ff fe80 	bl	800371a <LL_ADC_IsEnabled>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4819      	ldr	r0, [pc, #100]	; (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a1e:	f7ff fe7c 	bl	800371a <LL_ADC_IsEnabled>
 8003a22:	4603      	mov	r3, r0
 8003a24:	431c      	orrs	r4, r3
 8003a26:	481a      	ldr	r0, [pc, #104]	; (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a28:	f7ff fe77 	bl	800371a <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4323      	orrs	r3, r4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a46:	f023 030f 	bic.w	r3, r3, #15
 8003a4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a4e:	e009      	b.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a62:	e000      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3784      	adds	r7, #132	; 0x84
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	50000100 	.word	0x50000100
 8003a80:	50000400 	.word	0x50000400
 8003a84:	50000500 	.word	0x50000500
 8003a88:	50000300 	.word	0x50000300
 8003a8c:	50000700 	.word	0x50000700
 8003a90:	50000600 	.word	0x50000600

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c00:	d301      	bcc.n	8003c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c02:	2301      	movs	r3, #1
 8003c04:	e00f      	b.n	8003c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <SysTick_Config+0x40>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0e:	210f      	movs	r1, #15
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	f7ff ff8e 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <SysTick_Config+0x40>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <SysTick_Config+0x40>)
 8003c20:	2207      	movs	r2, #7
 8003c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	e000e010 	.word	0xe000e010

08003c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff29 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff40 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff90 	bl	8003b88 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5f 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff33 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffa4 	bl	8003bf0 <SysTick_Config>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08d      	b.n	8003de2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_DMA_Init+0x138>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d80f      	bhi.n	8003cf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <HAL_DMA_Init+0x13c>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a45      	ldr	r2, [pc, #276]	; (8003df4 <HAL_DMA_Init+0x140>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	009a      	lsls	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_DMA_Init+0x144>)
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
 8003cf0:	e00e      	b.n	8003d10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <HAL_DMA_Init+0x148>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a3d      	ldr	r2, [pc, #244]	; (8003df4 <HAL_DMA_Init+0x140>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <HAL_DMA_Init+0x14c>)
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9b6 	bl	80040d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x104>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9d6 	bl	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40020407 	.word	0x40020407
 8003df0:	bffdfff8 	.word	0xbffdfff8
 8003df4:	cccccccd 	.word	0xcccccccd
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	bffdfbf8 	.word	0xbffdfbf8
 8003e00:	40020400 	.word	0x40020400

08003e04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Start_IT+0x20>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e066      	b.n	8003ef2 <HAL_DMA_Start_IT+0xee>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d155      	bne.n	8003ee4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f8fb 	bl	8004058 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 020e 	orr.w	r2, r2, #14
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00f      	b.n	8003e9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 020a 	orr.w	r2, r2, #10
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e005      	b.n	8003ef0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d026      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x7a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0204 	bic.w	r2, r2, #4
 8003f4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f003 021f 	and.w	r2, r3, #31
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d071      	beq.n	800404e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f72:	e06c      	b.n	800404e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02e      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d029      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 020a 	bic.w	r2, r2, #10
 8003fae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f003 021f 	and.w	r2, r3, #31
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d038      	beq.n	800404e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fe4:	e033      	b.n	800404e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	2208      	movs	r2, #8
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02a      	beq.n	8004050 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d025      	beq.n	8004050 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 020e 	bic.w	r2, r2, #14
 8004012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800404e:	bf00      	nop
 8004050:	bf00      	nop
}
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800406e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f003 021f 	and.w	r2, r3, #31
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d108      	bne.n	80040b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040b6:	e007      	b.n	80040c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d802      	bhi.n	80040ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e001      	b.n	80040f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	3b08      	subs	r3, #8
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40020407 	.word	0x40020407
 8004140:	40020800 	.word	0x40020800
 8004144:	40020820 	.word	0x40020820
 8004148:	cccccccd 	.word	0xcccccccd
 800414c:	40020880 	.word	0x40020880

08004150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004172:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3b01      	subs	r3, #1
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	1000823f 	.word	0x1000823f
 8004194:	40020940 	.word	0x40020940

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041a6:	e15a      	b.n	800445e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 814c 	beq.w	8004458 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d005      	beq.n	80041d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d130      	bne.n	800423a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420e:	2201      	movs	r2, #1
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 0201 	and.w	r2, r3, #1
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b03      	cmp	r3, #3
 8004244:	d017      	beq.n	8004276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d123      	bne.n	80042ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	220f      	movs	r2, #15
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3208      	adds	r2, #8
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80a6 	beq.w	8004458 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <HAL_GPIO_Init+0x2e4>)
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	4a5a      	ldr	r2, [pc, #360]	; (800447c <HAL_GPIO_Init+0x2e4>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6613      	str	r3, [r2, #96]	; 0x60
 8004318:	4b58      	ldr	r3, [pc, #352]	; (800447c <HAL_GPIO_Init+0x2e4>)
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004324:	4a56      	ldr	r2, [pc, #344]	; (8004480 <HAL_GPIO_Init+0x2e8>)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	220f      	movs	r2, #15
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800434e:	d01f      	beq.n	8004390 <HAL_GPIO_Init+0x1f8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a4c      	ldr	r2, [pc, #304]	; (8004484 <HAL_GPIO_Init+0x2ec>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d019      	beq.n	800438c <HAL_GPIO_Init+0x1f4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a4b      	ldr	r2, [pc, #300]	; (8004488 <HAL_GPIO_Init+0x2f0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_GPIO_Init+0x1f0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a4a      	ldr	r2, [pc, #296]	; (800448c <HAL_GPIO_Init+0x2f4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00d      	beq.n	8004384 <HAL_GPIO_Init+0x1ec>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a49      	ldr	r2, [pc, #292]	; (8004490 <HAL_GPIO_Init+0x2f8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <HAL_GPIO_Init+0x1e8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a48      	ldr	r2, [pc, #288]	; (8004494 <HAL_GPIO_Init+0x2fc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <HAL_GPIO_Init+0x1e4>
 8004378:	2305      	movs	r3, #5
 800437a:	e00a      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 800437c:	2306      	movs	r3, #6
 800437e:	e008      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 8004380:	2304      	movs	r3, #4
 8004382:	e006      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 8004384:	2303      	movs	r3, #3
 8004386:	e004      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 8004388:	2302      	movs	r3, #2
 800438a:	e002      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_GPIO_Init+0x1fa>
 8004390:	2300      	movs	r3, #0
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	f002 0203 	and.w	r2, r2, #3
 8004398:	0092      	lsls	r2, r2, #2
 800439a:	4093      	lsls	r3, r2
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043a2:	4937      	ldr	r1, [pc, #220]	; (8004480 <HAL_GPIO_Init+0x2e8>)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	3302      	adds	r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_GPIO_Init+0x300>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043d4:	4a30      	ldr	r2, [pc, #192]	; (8004498 <HAL_GPIO_Init+0x300>)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043da:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_GPIO_Init+0x300>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043fe:	4a26      	ldr	r2, [pc, #152]	; (8004498 <HAL_GPIO_Init+0x300>)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_GPIO_Init+0x300>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	43db      	mvns	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_GPIO_Init+0x300>)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_GPIO_Init+0x300>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004452:	4a11      	ldr	r2, [pc, #68]	; (8004498 <HAL_GPIO_Init+0x300>)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3301      	adds	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f ae9d 	bne.w	80041a8 <HAL_GPIO_Init+0x10>
  }
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40021000 	.word	0x40021000
 8004480:	40010000 	.word	0x40010000
 8004484:	48000400 	.word	0x48000400
 8004488:	48000800 	.word	0x48000800
 800448c:	48000c00 	.word	0x48000c00
 8004490:	48001000 	.word	0x48001000
 8004494:	48001400 	.word	0x48001400
 8004498:	40010400 	.word	0x40010400

0800449c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
 80044a8:	4613      	mov	r3, r2
 80044aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ac:	787b      	ldrb	r3, [r7, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044b8:	e002      	b.n	80044c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	041a      	lsls	r2, r3, #16
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	43d9      	mvns	r1, r3
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	400b      	ands	r3, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fb18 	bl	8001b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40010400 	.word	0x40010400

08004530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d141      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d131      	bne.n	80045b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800454c:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	4a46      	ldr	r2, [pc, #280]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004564:	4a41      	ldr	r2, [pc, #260]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2232      	movs	r2, #50	; 0x32
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	0c9b      	lsrs	r3, r3, #18
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004582:	e002      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d102      	bne.n	800459e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f2      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d158      	bne.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e057      	b.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b0:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b6:	4a2d      	ldr	r2, [pc, #180]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045c0:	e04d      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c8:	d141      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d6:	d131      	bne.n	800463c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d8:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2232      	movs	r2, #50	; 0x32
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460e:	e002      	b.n	8004616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b01      	subs	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d102      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f2      	bne.n	8004610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d112      	bne.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e011      	b.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800464c:	e007      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40007000 	.word	0x40007000
 8004670:	20000004 	.word	0x20000004
 8004674:	431bde83 	.word	0x431bde83

08004678 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004686:	6093      	str	r3, [r2, #8]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40007000 	.word	0x40007000

08004698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e2fe      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d075      	beq.n	80047a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b6:	4b97      	ldr	r3, [pc, #604]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c0:	4b94      	ldr	r3, [pc, #592]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	d102      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3e>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_OscConfig+0x44>
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x108>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d157      	bne.n	80047a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e2d9      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x74>
 80046fe:	4b85      	ldr	r3, [pc, #532]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a84      	ldr	r2, [pc, #528]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x98>
 8004716:	4b7f      	ldr	r3, [pc, #508]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7e      	ldr	r2, [pc, #504]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b7c      	ldr	r3, [pc, #496]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7b      	ldr	r2, [pc, #492]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 8004730:	4b78      	ldr	r3, [pc, #480]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a77      	ldr	r2, [pc, #476]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b75      	ldr	r3, [pc, #468]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a74      	ldr	r2, [pc, #464]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fcfa 	bl	8002148 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fd fcf6 	bl	8002148 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e29e      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0xc0>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fce6 	bl	8002148 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fd fce2 	bl	8002148 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e28a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004792:	4b60      	ldr	r3, [pc, #384]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0xe8>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d075      	beq.n	800489a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b8:	4b56      	ldr	r3, [pc, #344]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_OscConfig+0x136>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d002      	beq.n	80047d4 <HAL_RCC_OscConfig+0x13c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d11f      	bne.n	8004814 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d4:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_OscConfig+0x154>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e25d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	4946      	ldr	r1, [pc, #280]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004800:	4b45      	ldr	r3, [pc, #276]	; (8004918 <HAL_RCC_OscConfig+0x280>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd fc53 	bl	80020b0 <HAL_InitTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d043      	beq.n	8004898 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e249      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d023      	beq.n	8004864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3c      	ldr	r2, [pc, #240]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fc8e 	bl	8002148 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004830:	f7fd fc8a 	bl	8002148 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e232      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	492d      	ldr	r1, [pc, #180]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
 8004862:	e01a      	b.n	800489a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800486a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fc6a 	bl	8002148 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7fd fc66 	bl	8002148 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e20e      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1e0>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d041      	beq.n	800492a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ae:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fd fc43 	bl	8002148 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fd fc3f 	bl	8002148 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1e7      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <HAL_RCC_OscConfig+0x22e>
 80048e6:	e020      	b.n	800492a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd fc26 	bl	8002148 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fe:	e00d      	b.n	800491c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd fc22 	bl	8002148 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d906      	bls.n	800491c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1ca      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800491c:	4b8c      	ldr	r3, [pc, #560]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ea      	bne.n	8004900 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80a6 	beq.w	8004a84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004938:	2300      	movs	r3, #0
 800493a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800493c:	4b84      	ldr	r3, [pc, #528]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_OscConfig+0x2b4>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x2b6>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	4a7e      	ldr	r2, [pc, #504]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495c:	6593      	str	r3, [r2, #88]	; 0x58
 800495e:	4b7c      	ldr	r3, [pc, #496]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496e:	4b79      	ldr	r3, [pc, #484]	; (8004b54 <HAL_RCC_OscConfig+0x4bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497a:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCC_OscConfig+0x4bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x4bc>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fd fbdf 	bl	8002148 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fd fbdb 	bl	8002148 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e183      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a0:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <HAL_RCC_OscConfig+0x4bc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d108      	bne.n	80049c6 <HAL_RCC_OscConfig+0x32e>
 80049b4:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c4:	e024      	b.n	8004a10 <HAL_RCC_OscConfig+0x378>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d110      	bne.n	80049f0 <HAL_RCC_OscConfig+0x358>
 80049ce:	4b60      	ldr	r3, [pc, #384]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	4a5e      	ldr	r2, [pc, #376]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049de:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	4a5a      	ldr	r2, [pc, #360]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ee:	e00f      	b.n	8004a10 <HAL_RCC_OscConfig+0x378>
 80049f0:	4b57      	ldr	r3, [pc, #348]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a56      	ldr	r2, [pc, #344]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d016      	beq.n	8004a46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd fb96 	bl	8002148 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd fb92 	bl	8002148 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e138      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ed      	beq.n	8004a20 <HAL_RCC_OscConfig+0x388>
 8004a44:	e015      	b.n	8004a72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fd fb7f 	bl	8002148 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd fb7b 	bl	8002148 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e121      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ed      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d105      	bne.n	8004a84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a78:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d03c      	beq.n	8004b0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fb4e 	bl	8002148 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab0:	f7fd fb4a 	bl	8002148 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0f2      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x418>
 8004ad0:	e01b      	b.n	8004b0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd fb31 	bl	8002148 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aea:	f7fd fb2d 	bl	8002148 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e0d5      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ef      	bne.n	8004aea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80c9 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	f000 8083 	beq.w	8004c28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d15e      	bne.n	8004be8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x4b8>)
 8004b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fd fb07 	bl	8002148 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	e00c      	b.n	8004b58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd fb03 	bl	8002148 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d905      	bls.n	8004b58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e0ab      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b58:	4b55      	ldr	r3, [pc, #340]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ec      	bne.n	8004b3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b64:	4b52      	ldr	r3, [pc, #328]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	4b52      	ldr	r3, [pc, #328]	; (8004cb4 <HAL_RCC_OscConfig+0x61c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6a11      	ldr	r1, [r2, #32]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0112      	lsls	r2, r2, #4
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b7e:	0212      	lsls	r2, r2, #8
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0552      	lsls	r2, r2, #21
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b92:	0852      	lsrs	r2, r2, #1
 8004b94:	3a01      	subs	r2, #1
 8004b96:	0652      	lsls	r2, r2, #25
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b9e:	06d2      	lsls	r2, r2, #27
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4943      	ldr	r1, [pc, #268]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a40      	ldr	r2, [pc, #256]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a3d      	ldr	r2, [pc, #244]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fac2 	bl	8002148 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd fabe 	bl	8002148 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e066      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x530>
 8004be6:	e05e      	b.n	8004ca6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd faa8 	bl	8002148 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd faa4 	bl	8002148 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c1a:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	4924      	ldr	r1, [pc, #144]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_RCC_OscConfig+0x620>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]
 8004c26:	e03e      	b.n	8004ca6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e039      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <HAL_RCC_OscConfig+0x618>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0203 	and.w	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d12c      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	3b01      	subs	r3, #1
 8004c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d123      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d11b      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d113      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	3b01      	subs	r3, #1
 8004c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	019f800c 	.word	0x019f800c
 8004cb8:	feeefffc 	.word	0xfeeefffc

08004cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e11e      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d910      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b8e      	ldr	r3, [pc, #568]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 020f 	bic.w	r2, r3, #15
 8004cea:	498c      	ldr	r1, [pc, #560]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b8a      	ldr	r3, [pc, #552]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e106      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d073      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d129      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d18:	4b81      	ldr	r3, [pc, #516]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0f4      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d28:	f000 f99e 	bl	8005068 <RCC_GetSysClockFreqFromPLLSource>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4a7c      	ldr	r2, [pc, #496]	; (8004f24 <HAL_RCC_ClockConfig+0x268>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d93f      	bls.n	8004db6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d36:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d033      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d12f      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d56:	4b72      	ldr	r3, [pc, #456]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	4a70      	ldr	r2, [pc, #448]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e024      	b.n	8004db6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d74:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0c6      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d84:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0be      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d94:	f000 f8ce 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4a61      	ldr	r2, [pc, #388]	; (8004f24 <HAL_RCC_ClockConfig+0x268>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d909      	bls.n	8004db6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004daa:	4a5d      	ldr	r2, [pc, #372]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004db6:	4b5a      	ldr	r3, [pc, #360]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4957      	ldr	r1, [pc, #348]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd f9be 	bl	8002148 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7fd f9ba 	bl	8002148 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e095      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b4e      	ldr	r3, [pc, #312]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 020c 	and.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1eb      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a42      	ldr	r2, [pc, #264]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e28:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e30:	4a3b      	ldr	r2, [pc, #236]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e38:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4936      	ldr	r1, [pc, #216]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d105      	bne.n	8004e5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e52:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d21d      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 020f 	bic.w	r2, r3, #15
 8004e74:	4929      	ldr	r1, [pc, #164]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f964 	bl	8002148 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd f960 	bl	8002148 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e03b      	b.n	8004f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1ed      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4917      	ldr	r1, [pc, #92]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	490f      	ldr	r1, [pc, #60]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee6:	f000 f825 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <HAL_RCC_ClockConfig+0x264>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	490c      	ldr	r1, [pc, #48]	; (8004f28 <HAL_RCC_ClockConfig+0x26c>)
 8004ef8:	5ccb      	ldrb	r3, [r1, r3]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	fa22 f303 	lsr.w	r3, r2, r3
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x270>)
 8004f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x274>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd f8d0 	bl	80020b0 <HAL_InitTick>
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40021000 	.word	0x40021000
 8004f24:	04c4b400 	.word	0x04c4b400
 8004f28:	08007cbc 	.word	0x08007cbc
 8004f2c:	20000004 	.word	0x20000004
 8004f30:	20000008 	.word	0x20000008

08004f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f3a:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d102      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e047      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d102      	bne.n	8004f5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e03e      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f5e:	4b23      	ldr	r3, [pc, #140]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d136      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f74:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d10c      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f88:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	4a16      	ldr	r2, [pc, #88]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	68d2      	ldr	r2, [r2, #12]
 8004f94:	0a12      	lsrs	r2, r2, #8
 8004f96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	617b      	str	r3, [r7, #20]
      break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	0a12      	lsrs	r2, r2, #8
 8004fb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
      break;
 8004fba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	0e5b      	lsrs	r3, r3, #25
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e001      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fdc:	693b      	ldr	r3, [r7, #16]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	016e3600 	.word	0x016e3600

08004ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000004 	.word	0x20000004

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005014:	f7ff fff0 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0a1b      	lsrs	r3, r3, #8
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4904      	ldr	r1, [pc, #16]	; (8005038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	08007ccc 	.word	0x08007ccc

0800503c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005040:	f7ff ffda 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	0adb      	lsrs	r3, r3, #11
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4904      	ldr	r1, [pc, #16]	; (8005064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021000 	.word	0x40021000
 8005064:	08007ccc 	.word	0x08007ccc

08005068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d10c      	bne.n	80050a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508c:	4a17      	ldr	r2, [pc, #92]	; (80050ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	0a12      	lsrs	r2, r2, #8
 800509a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
    break;
 80050a4:	e00c      	b.n	80050c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	0a12      	lsrs	r2, r2, #8
 80050b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
    break;
 80050be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0e5b      	lsrs	r3, r3, #25
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050da:	687b      	ldr	r3, [r7, #4]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40021000 	.word	0x40021000
 80050ec:	016e3600 	.word	0x016e3600
 80050f0:	00f42400 	.word	0x00f42400

080050f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050fc:	2300      	movs	r3, #0
 80050fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005100:	2300      	movs	r3, #0
 8005102:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8098 	beq.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005112:	2300      	movs	r3, #0
 8005114:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005116:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005122:	4b40      	ldr	r3, [pc, #256]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512c:	6593      	str	r3, [r2, #88]	; 0x58
 800512e:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513e:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a39      	ldr	r2, [pc, #228]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800514a:	f7fc fffd 	bl	8002148 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005150:	e009      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005152:	f7fc fff9 	bl	8002148 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d902      	bls.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	74fb      	strb	r3, [r7, #19]
        break;
 8005164:	e005      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005166:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ef      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d159      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005178:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01e      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	429a      	cmp	r2, r3
 8005192:	d019      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a0:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051b0:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fc ffb9 	bl	8002148 <HAL_GetTick>
 80051d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d8:	e00b      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fc ffb5 	bl	8002148 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d902      	bls.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	74fb      	strb	r3, [r7, #19]
            break;
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ec      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800521c:	e008      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	74bb      	strb	r3, [r7, #18]
 8005222:	e005      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005224:	40021000 	.word	0x40021000
 8005228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7c7b      	ldrb	r3, [r7, #17]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4ba7      	ldr	r3, [pc, #668]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	4aa6      	ldr	r2, [pc, #664]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800524e:	4ba1      	ldr	r3, [pc, #644]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f023 0203 	bic.w	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	499d      	ldr	r1, [pc, #628]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005270:	4b98      	ldr	r3, [pc, #608]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f023 020c 	bic.w	r2, r3, #12
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4995      	ldr	r1, [pc, #596]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005292:	4b90      	ldr	r3, [pc, #576]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	498c      	ldr	r1, [pc, #560]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052b4:	4b87      	ldr	r3, [pc, #540]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4984      	ldr	r1, [pc, #528]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052d6:	4b7f      	ldr	r3, [pc, #508]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	497b      	ldr	r1, [pc, #492]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f8:	4b76      	ldr	r3, [pc, #472]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	4973      	ldr	r1, [pc, #460]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800531a:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	496a      	ldr	r1, [pc, #424]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800533c:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4962      	ldr	r1, [pc, #392]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800535e:	4b5d      	ldr	r3, [pc, #372]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	4959      	ldr	r1, [pc, #356]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005380:	4b54      	ldr	r3, [pc, #336]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	4951      	ldr	r1, [pc, #324]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053a2:	4b4c      	ldr	r3, [pc, #304]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	4948      	ldr	r1, [pc, #288]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053c4:	4b43      	ldr	r3, [pc, #268]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4940      	ldr	r1, [pc, #256]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053fc:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	4932      	ldr	r1, [pc, #200]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	4924      	ldr	r1, [pc, #144]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005454:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	4916      	ldr	r1, [pc, #88]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548a:	d105      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a10      	ldr	r2, [pc, #64]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d019      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c2:	d109      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4a02      	ldr	r2, [pc, #8]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ce:	60d3      	str	r3, [r2, #12]
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d015      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054e4:	4b29      	ldr	r3, [pc, #164]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	4926      	ldr	r1, [pc, #152]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005504:	4b21      	ldr	r3, [pc, #132]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800550a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552a:	4918      	ldr	r1, [pc, #96]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d105      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a12      	ldr	r2, [pc, #72]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005546:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d015      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800555a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005562:	490a      	ldr	r1, [pc, #40]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d105      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800557a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005580:	7cbb      	ldrb	r3, [r7, #18]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e049      	b.n	8005636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fc16 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fd78 	bl	80060c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e04c      	b.n	80056f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <HAL_TIM_Base_Start+0xc0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d01d      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a22      	ldr	r2, [pc, #136]	; (8005704 <HAL_TIM_Base_Start+0xc4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a21      	ldr	r2, [pc, #132]	; (8005708 <HAL_TIM_Base_Start+0xc8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_TIM_Base_Start+0xcc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_TIM_Base_Start+0xd0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_Base_Start+0xd4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_Base_Start+0x70>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIM_Base_Start+0xd8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d115      	bne.n	80056dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_TIM_Base_Start+0xdc>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d015      	beq.n	80056ee <HAL_TIM_Base_Start+0xae>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d011      	beq.n	80056ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e008      	b.n	80056ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40015000 	.word	0x40015000
 800571c:	00010007 	.word	0x00010007

08005720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e049      	b.n	80057c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f841 	bl	80057ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f000 fcb0 	bl	80060c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_PWM_Start+0x24>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e03c      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b04      	cmp	r3, #4
 800580c:	d109      	bne.n	8005822 <HAL_TIM_PWM_Start+0x3e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	e02f      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d109      	bne.n	800583c <HAL_TIM_PWM_Start+0x58>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e022      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b0c      	cmp	r3, #12
 8005840:	d109      	bne.n	8005856 <HAL_TIM_PWM_Start+0x72>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e015      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start+0x8c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e008      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0a6      	b.n	80059d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xb6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005898:	e023      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0xc6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a8:	e01b      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0xd6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b8:	e013      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0xe6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c8:	e00b      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0xf6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d8:	e003      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 f864 	bl	80069b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3a      	ldr	r2, [pc, #232]	; (80059e0 <HAL_TIM_PWM_Start+0x1fc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_TIM_PWM_Start+0x148>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a39      	ldr	r2, [pc, #228]	; (80059e4 <HAL_TIM_PWM_Start+0x200>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_TIM_PWM_Start+0x148>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <HAL_TIM_PWM_Start+0x204>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIM_PWM_Start+0x148>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a36      	ldr	r2, [pc, #216]	; (80059ec <HAL_TIM_PWM_Start+0x208>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIM_PWM_Start+0x148>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <HAL_TIM_PWM_Start+0x20c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_PWM_Start+0x148>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <HAL_TIM_PWM_Start+0x210>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d101      	bne.n	8005930 <HAL_TIM_PWM_Start+0x14c>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_TIM_PWM_Start+0x14e>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <HAL_TIM_PWM_Start+0x1fc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d01d      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_TIM_PWM_Start+0x214>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a24      	ldr	r2, [pc, #144]	; (80059fc <HAL_TIM_PWM_Start+0x218>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_TIM_PWM_Start+0x21c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_TIM_PWM_Start+0x200>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_TIM_PWM_Start+0x204>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIM_PWM_Start+0x1b2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <HAL_TIM_PWM_Start+0x210>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d115      	bne.n	80059c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_TIM_PWM_Start+0x220>)
 800599e:	4013      	ands	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b06      	cmp	r3, #6
 80059a6:	d015      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1f0>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ae:	d011      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	e008      	b.n	80059d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40013400 	.word	0x40013400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40015000 	.word	0x40015000
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	00010007 	.word	0x00010007

08005a08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e097      	b.n	8005b4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fc fa0d 	bl	8001e50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005a4c:	f023 0307 	bic.w	r3, r3, #7
 8005a50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f000 fb31 	bl	80060c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005aa8:	f023 030c 	bic.w	r3, r3, #12
 8005aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	031b      	lsls	r3, r3, #12
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4313      	orrs	r3, r2
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d110      	bne.n	8005ba6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d102      	bne.n	8005b90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b8a:	7b7b      	ldrb	r3, [r7, #13]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e069      	b.n	8005c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba4:	e031      	b.n	8005c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d110      	bne.n	8005bce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bb2:	7b3b      	ldrb	r3, [r7, #12]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e055      	b.n	8005c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bcc:	e01d      	b.n	8005c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d108      	bne.n	8005be6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	7b7b      	ldrb	r3, [r7, #13]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d102      	bne.n	8005be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be0:	7b3b      	ldrb	r3, [r7, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e03e      	b.n	8005c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_Encoder_Start+0xc4>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d008      	beq.n	8005c28 <HAL_TIM_Encoder_Start+0xd4>
 8005c16:	e00f      	b.n	8005c38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fec9 	bl	80069b8 <TIM_CCxChannelCmd>
      break;
 8005c26:	e016      	b.n	8005c56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fec1 	bl	80069b8 <TIM_CCxChannelCmd>
      break;
 8005c36:	e00e      	b.n	8005c56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 feb9 	bl	80069b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 feb2 	bl	80069b8 <TIM_CCxChannelCmd>
      break;
 8005c54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0ff      	b.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b14      	cmp	r3, #20
 8005c9a:	f200 80f0 	bhi.w	8005e7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cf9 	.word	0x08005cf9
 8005ca8:	08005e7f 	.word	0x08005e7f
 8005cac:	08005e7f 	.word	0x08005e7f
 8005cb0:	08005e7f 	.word	0x08005e7f
 8005cb4:	08005d39 	.word	0x08005d39
 8005cb8:	08005e7f 	.word	0x08005e7f
 8005cbc:	08005e7f 	.word	0x08005e7f
 8005cc0:	08005e7f 	.word	0x08005e7f
 8005cc4:	08005d7b 	.word	0x08005d7b
 8005cc8:	08005e7f 	.word	0x08005e7f
 8005ccc:	08005e7f 	.word	0x08005e7f
 8005cd0:	08005e7f 	.word	0x08005e7f
 8005cd4:	08005dbb 	.word	0x08005dbb
 8005cd8:	08005e7f 	.word	0x08005e7f
 8005cdc:	08005e7f 	.word	0x08005e7f
 8005ce0:	08005e7f 	.word	0x08005e7f
 8005ce4:	08005dfd 	.word	0x08005dfd
 8005ce8:	08005e7f 	.word	0x08005e7f
 8005cec:	08005e7f 	.word	0x08005e7f
 8005cf0:	08005e7f 	.word	0x08005e7f
 8005cf4:	08005e3d 	.word	0x08005e3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fa94 	bl	800622c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	619a      	str	r2, [r3, #24]
      break;
 8005d36:	e0a5      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fb0e 	bl	8006360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6999      	ldr	r1, [r3, #24]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
      break;
 8005d78:	e084      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fb81 	bl	8006488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0208 	orr.w	r2, r2, #8
 8005d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0204 	bic.w	r2, r2, #4
 8005da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69d9      	ldr	r1, [r3, #28]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
      break;
 8005db8:	e064      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fbf3 	bl	80065ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69d9      	ldr	r1, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	021a      	lsls	r2, r3, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	61da      	str	r2, [r3, #28]
      break;
 8005dfa:	e043      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fc66 	bl	80066d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e3a:	e023      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fcb0 	bl	80067a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e7c:	e002      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
      break;
 8005e82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop

08005e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e0f6      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x20a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a6f      	ldr	r2, [pc, #444]	; (80060ac <HAL_TIM_ConfigClockSource+0x214>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f000 80c1 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005ef4:	4a6d      	ldr	r2, [pc, #436]	; (80060ac <HAL_TIM_ConfigClockSource+0x214>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f200 80c6 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005efc:	4a6c      	ldr	r2, [pc, #432]	; (80060b0 <HAL_TIM_ConfigClockSource+0x218>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f000 80b9 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f04:	4a6a      	ldr	r2, [pc, #424]	; (80060b0 <HAL_TIM_ConfigClockSource+0x218>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f200 80be 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f0c:	4a69      	ldr	r2, [pc, #420]	; (80060b4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f000 80b1 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f14:	4a67      	ldr	r2, [pc, #412]	; (80060b4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f200 80b6 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f1c:	4a66      	ldr	r2, [pc, #408]	; (80060b8 <HAL_TIM_ConfigClockSource+0x220>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f000 80a9 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f24:	4a64      	ldr	r2, [pc, #400]	; (80060b8 <HAL_TIM_ConfigClockSource+0x220>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f200 80ae 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f2c:	4a63      	ldr	r2, [pc, #396]	; (80060bc <HAL_TIM_ConfigClockSource+0x224>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	f000 80a1 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f34:	4a61      	ldr	r2, [pc, #388]	; (80060bc <HAL_TIM_ConfigClockSource+0x224>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f200 80a6 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f3c:	4a60      	ldr	r2, [pc, #384]	; (80060c0 <HAL_TIM_ConfigClockSource+0x228>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	f000 8099 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f44:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <HAL_TIM_ConfigClockSource+0x228>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f200 809e 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f50:	f000 8091 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f58:	f200 8096 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f60:	f000 8089 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f68:	f200 808e 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f70:	d03e      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0x158>
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f76:	f200 8087 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	f000 8086 	beq.w	800608e <HAL_TIM_ConfigClockSource+0x1f6>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d87f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d01a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x12a>
 8005f8c:	2b70      	cmp	r3, #112	; 0x70
 8005f8e:	d87b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d050      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x19e>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d877      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f98:	2b50      	cmp	r3, #80	; 0x50
 8005f9a:	d03c      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x17e>
 8005f9c:	2b50      	cmp	r3, #80	; 0x50
 8005f9e:	d873      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d058      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1be>
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d86f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d064      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d86b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d060      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d867      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d05a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x1de>
 8005fc0:	e062      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd2:	f000 fcd1 	bl	8006978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	609a      	str	r2, [r3, #8]
      break;
 8005fee:	e04f      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006000:	f000 fcba 	bl	8006978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006012:	609a      	str	r2, [r3, #8]
      break;
 8006014:	e03c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fc2c 	bl	8006880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2150      	movs	r1, #80	; 0x50
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fc85 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006034:	e02c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	461a      	mov	r2, r3
 8006044:	f000 fc4b 	bl	80068de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2160      	movs	r1, #96	; 0x60
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fc75 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006054:	e01c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	461a      	mov	r2, r3
 8006064:	f000 fc0c 	bl	8006880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fc65 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006074:	e00c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fc5c 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006086:	e003      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	e000      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800608e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	00100070 	.word	0x00100070
 80060b0:	00100060 	.word	0x00100060
 80060b4:	00100050 	.word	0x00100050
 80060b8:	00100040 	.word	0x00100040
 80060bc:	00100030 	.word	0x00100030
 80060c0:	00100020 	.word	0x00100020

080060c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a4c      	ldr	r2, [pc, #304]	; (8006208 <TIM_Base_SetConfig+0x144>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d017      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e2:	d013      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a49      	ldr	r2, [pc, #292]	; (800620c <TIM_Base_SetConfig+0x148>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a48      	ldr	r2, [pc, #288]	; (8006210 <TIM_Base_SetConfig+0x14c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a47      	ldr	r2, [pc, #284]	; (8006214 <TIM_Base_SetConfig+0x150>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a46      	ldr	r2, [pc, #280]	; (8006218 <TIM_Base_SetConfig+0x154>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_Base_SetConfig+0x48>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a45      	ldr	r2, [pc, #276]	; (800621c <TIM_Base_SetConfig+0x158>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d108      	bne.n	800611e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a39      	ldr	r2, [pc, #228]	; (8006208 <TIM_Base_SetConfig+0x144>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d023      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612c:	d01f      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a36      	ldr	r2, [pc, #216]	; (800620c <TIM_Base_SetConfig+0x148>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01b      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a35      	ldr	r2, [pc, #212]	; (8006210 <TIM_Base_SetConfig+0x14c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d017      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a34      	ldr	r2, [pc, #208]	; (8006214 <TIM_Base_SetConfig+0x150>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a33      	ldr	r2, [pc, #204]	; (8006218 <TIM_Base_SetConfig+0x154>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00f      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a33      	ldr	r2, [pc, #204]	; (8006220 <TIM_Base_SetConfig+0x15c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00b      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a32      	ldr	r2, [pc, #200]	; (8006224 <TIM_Base_SetConfig+0x160>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a31      	ldr	r2, [pc, #196]	; (8006228 <TIM_Base_SetConfig+0x164>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_Base_SetConfig+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2c      	ldr	r2, [pc, #176]	; (800621c <TIM_Base_SetConfig+0x158>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d108      	bne.n	8006180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <TIM_Base_SetConfig+0x144>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <TIM_Base_SetConfig+0x110>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1a      	ldr	r2, [pc, #104]	; (8006218 <TIM_Base_SetConfig+0x154>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_Base_SetConfig+0x110>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <TIM_Base_SetConfig+0x15c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_Base_SetConfig+0x110>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a19      	ldr	r2, [pc, #100]	; (8006224 <TIM_Base_SetConfig+0x160>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_Base_SetConfig+0x110>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <TIM_Base_SetConfig+0x164>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_Base_SetConfig+0x110>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <TIM_Base_SetConfig+0x158>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d103      	bne.n	80061dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d105      	bne.n	80061fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f023 0201 	bic.w	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	611a      	str	r2, [r3, #16]
  }
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40000400 	.word	0x40000400
 8006210:	40000800 	.word	0x40000800
 8006214:	40000c00 	.word	0x40000c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40015000 	.word	0x40015000
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	f023 0201 	bic.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0302 	bic.w	r3, r3, #2
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a30      	ldr	r2, [pc, #192]	; (8006348 <TIM_OC1_SetConfig+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_OC1_SetConfig+0x88>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a2f      	ldr	r2, [pc, #188]	; (800634c <TIM_OC1_SetConfig+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC1_SetConfig+0x88>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2e      	ldr	r2, [pc, #184]	; (8006350 <TIM_OC1_SetConfig+0x124>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC1_SetConfig+0x88>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a2d      	ldr	r2, [pc, #180]	; (8006354 <TIM_OC1_SetConfig+0x128>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC1_SetConfig+0x88>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <TIM_OC1_SetConfig+0x12c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC1_SetConfig+0x88>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a2b      	ldr	r2, [pc, #172]	; (800635c <TIM_OC1_SetConfig+0x130>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10c      	bne.n	80062ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0308 	bic.w	r3, r3, #8
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 0304 	bic.w	r3, r3, #4
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <TIM_OC1_SetConfig+0x11c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_OC1_SetConfig+0xd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <TIM_OC1_SetConfig+0x120>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_OC1_SetConfig+0xd2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <TIM_OC1_SetConfig+0x124>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_OC1_SetConfig+0xd2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <TIM_OC1_SetConfig+0x128>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_OC1_SetConfig+0xd2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a19      	ldr	r2, [pc, #100]	; (8006358 <TIM_OC1_SetConfig+0x12c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_OC1_SetConfig+0xd2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a18      	ldr	r2, [pc, #96]	; (800635c <TIM_OC1_SetConfig+0x130>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d111      	bne.n	8006322 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800
 800635c:	40015000 	.word	0x40015000

08006360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0210 	bic.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0320 	bic.w	r3, r3, #32
 80063ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <TIM_OC2_SetConfig+0x110>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_OC2_SetConfig+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2b      	ldr	r2, [pc, #172]	; (8006474 <TIM_OC2_SetConfig+0x114>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC2_SetConfig+0x74>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <TIM_OC2_SetConfig+0x118>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10d      	bne.n	80063f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <TIM_OC2_SetConfig+0x110>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <TIM_OC2_SetConfig+0xc0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <TIM_OC2_SetConfig+0x114>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00f      	beq.n	8006420 <TIM_OC2_SetConfig+0xc0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <TIM_OC2_SetConfig+0x11c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00b      	beq.n	8006420 <TIM_OC2_SetConfig+0xc0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <TIM_OC2_SetConfig+0x120>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_OC2_SetConfig+0xc0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <TIM_OC2_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0xc0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <TIM_OC2_SetConfig+0x118>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d113      	bne.n	8006448 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	40015000 	.word	0x40015000
 800647c:	40014000 	.word	0x40014000
 8006480:	40014400 	.word	0x40014400
 8006484:	40014800 	.word	0x40014800

08006488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <TIM_OC3_SetConfig+0x10c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC3_SetConfig+0x72>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <TIM_OC3_SetConfig+0x110>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC3_SetConfig+0x72>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a29      	ldr	r2, [pc, #164]	; (800659c <TIM_OC3_SetConfig+0x114>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10d      	bne.n	8006516 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <TIM_OC3_SetConfig+0x10c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <TIM_OC3_SetConfig+0xbe>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <TIM_OC3_SetConfig+0x110>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_OC3_SetConfig+0xbe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <TIM_OC3_SetConfig+0x118>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_OC3_SetConfig+0xbe>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <TIM_OC3_SetConfig+0x11c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_OC3_SetConfig+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <TIM_OC3_SetConfig+0x120>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC3_SetConfig+0xbe>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <TIM_OC3_SetConfig+0x114>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d113      	bne.n	800656e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40015000 	.word	0x40015000
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40014400 	.word	0x40014400
 80065a8:	40014800 	.word	0x40014800

080065ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a2c      	ldr	r2, [pc, #176]	; (80066bc <TIM_OC4_SetConfig+0x110>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_OC4_SetConfig+0x74>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a2b      	ldr	r2, [pc, #172]	; (80066c0 <TIM_OC4_SetConfig+0x114>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_OC4_SetConfig+0x74>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <TIM_OC4_SetConfig+0x118>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	031b      	lsls	r3, r3, #12
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800663a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <TIM_OC4_SetConfig+0x110>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <TIM_OC4_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <TIM_OC4_SetConfig+0x114>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_OC4_SetConfig+0xc0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1e      	ldr	r2, [pc, #120]	; (80066c8 <TIM_OC4_SetConfig+0x11c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_OC4_SetConfig+0xc0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <TIM_OC4_SetConfig+0x120>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_OC4_SetConfig+0xc0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <TIM_OC4_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC4_SetConfig+0xc0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <TIM_OC4_SetConfig+0x118>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d113      	bne.n	8006694 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006672:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800667a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	019b      	lsls	r3, r3, #6
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	019b      	lsls	r3, r3, #6
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40013400 	.word	0x40013400
 80066c4:	40015000 	.word	0x40015000
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <TIM_OC5_SetConfig+0xbc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_OC5_SetConfig+0x82>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a18      	ldr	r2, [pc, #96]	; (8006794 <TIM_OC5_SetConfig+0xc0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_OC5_SetConfig+0x82>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC5_SetConfig+0xc4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_OC5_SetConfig+0x82>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC5_SetConfig+0xc8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_OC5_SetConfig+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <TIM_OC5_SetConfig+0xcc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_OC5_SetConfig+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <TIM_OC5_SetConfig+0xd0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d109      	bne.n	800676a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800
 80067a4:	40015000 	.word	0x40015000

080067a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	051b      	lsls	r3, r3, #20
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <TIM_OC6_SetConfig+0xc0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <TIM_OC6_SetConfig+0x84>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a19      	ldr	r2, [pc, #100]	; (800686c <TIM_OC6_SetConfig+0xc4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00f      	beq.n	800682c <TIM_OC6_SetConfig+0x84>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a18      	ldr	r2, [pc, #96]	; (8006870 <TIM_OC6_SetConfig+0xc8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00b      	beq.n	800682c <TIM_OC6_SetConfig+0x84>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a17      	ldr	r2, [pc, #92]	; (8006874 <TIM_OC6_SetConfig+0xcc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d007      	beq.n	800682c <TIM_OC6_SetConfig+0x84>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a16      	ldr	r2, [pc, #88]	; (8006878 <TIM_OC6_SetConfig+0xd0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_OC6_SetConfig+0x84>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a15      	ldr	r2, [pc, #84]	; (800687c <TIM_OC6_SetConfig+0xd4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d109      	bne.n	8006840 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40013400 	.word	0x40013400
 8006870:	40014000 	.word	0x40014000
 8006874:	40014400 	.word	0x40014400
 8006878:	40014800 	.word	0x40014800
 800687c:	40015000 	.word	0x40015000

08006880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f023 030a 	bic.w	r3, r3, #10
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068de:	b480      	push	{r7}
 80068e0:	b087      	sub	sp, #28
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f023 0210 	bic.w	r2, r3, #16
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800691a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	f043 0307 	orr.w	r3, r3, #7
 8006964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	609a      	str	r2, [r3, #8]
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	431a      	orrs	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4313      	orrs	r3, r2
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2201      	movs	r2, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	43db      	mvns	r3, r3
 80069da:	401a      	ands	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e074      	b.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a31      	ldr	r2, [pc, #196]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9c:	d01d      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10c      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40013400 	.word	0x40013400
 8006b1c:	40015000 	.word	0x40015000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40014000 	.word	0x40014000

08006b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e078      	b.n	8006c3e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d11c      	bne.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40015000 	.word	0x40015000

08006c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e042      	b.n	8006cf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fb f85b 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fc7a 	bl	800759c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f97b 	bl	8006fa4 <UART_SetConfig>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e01b      	b.n	8006cf0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fcf9 	bl	80076e0 <UART_CheckIdleState>
 8006cee:	4603      	mov	r3, r0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d17b      	bne.n	8006e0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_UART_Transmit+0x26>
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e074      	b.n	8006e0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d32:	f7fb fa09 	bl	8002148 <HAL_GetTick>
 8006d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d50:	d108      	bne.n	8006d64 <HAL_UART_Transmit+0x6c>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e003      	b.n	8006d6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d6c:	e030      	b.n	8006dd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2200      	movs	r2, #0
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fd5b 	bl	8007834 <UART_WaitOnFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e03d      	b.n	8006e0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3302      	adds	r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e007      	b.n	8006dbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1c8      	bne.n	8006d6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fd24 	bl	8007834 <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e000      	b.n	8006e0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e0a:	2302      	movs	r3, #2
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	f040 80b5 	bne.w	8006f9a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_UART_Receive+0x28>
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0ad      	b.n	8006f9c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2222      	movs	r2, #34	; 0x22
 8006e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e56:	f7fb f977 	bl	8002148 <HAL_GetTick>
 8006e5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	88fa      	ldrh	r2, [r7, #6]
 8006e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e74:	d10e      	bne.n	8006e94 <HAL_UART_Receive+0x80>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <HAL_UART_Receive+0x76>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e88:	e02d      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e92:	e028      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <HAL_UART_Receive+0xa4>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_UART_Receive+0x9a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	22ff      	movs	r2, #255	; 0xff
 8006ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006eac:	e01b      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	227f      	movs	r2, #127	; 0x7f
 8006eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006eb6:	e016      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec0:	d10d      	bne.n	8006ede <HAL_UART_Receive+0xca>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_UART_Receive+0xc0>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	227f      	movs	r2, #127	; 0x7f
 8006ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ed2:	e008      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	223f      	movs	r2, #63	; 0x3f
 8006ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006edc:	e003      	b.n	8006ee6 <HAL_UART_Receive+0xd2>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d108      	bne.n	8006f0a <HAL_UART_Receive+0xf6>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e003      	b.n	8006f12 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f12:	e036      	b.n	8006f82 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2120      	movs	r1, #32
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fc88 	bl	8007834 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e032      	b.n	8006f9c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	8a7b      	ldrh	r3, [r7, #18]
 8006f46:	4013      	ands	r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	3302      	adds	r3, #2
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	e00c      	b.n	8006f70 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	8a7b      	ldrh	r3, [r7, #18]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4013      	ands	r3, r2
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1c2      	bne.n	8006f14 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa8:	b08c      	sub	sp, #48	; 0x30
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4baa      	ldr	r3, [pc, #680]	; (800727c <UART_SetConfig+0x2d8>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a9f      	ldr	r2, [pc, #636]	; (8007280 <UART_SetConfig+0x2dc>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700c:	4313      	orrs	r3, r2
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800701a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	6812      	ldr	r2, [r2, #0]
 8007022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007024:	430b      	orrs	r3, r1
 8007026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	f023 010f 	bic.w	r1, r3, #15
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a90      	ldr	r2, [pc, #576]	; (8007284 <UART_SetConfig+0x2e0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d125      	bne.n	8007094 <UART_SetConfig+0xf0>
 8007048:	4b8f      	ldr	r3, [pc, #572]	; (8007288 <UART_SetConfig+0x2e4>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d81a      	bhi.n	800708c <UART_SetConfig+0xe8>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <UART_SetConfig+0xb8>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800706d 	.word	0x0800706d
 8007060:	0800707d 	.word	0x0800707d
 8007064:	08007075 	.word	0x08007075
 8007068:	08007085 	.word	0x08007085
 800706c:	2301      	movs	r3, #1
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007072:	e116      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007074:	2302      	movs	r3, #2
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e112      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e10e      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e10a      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007092:	e106      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a7c      	ldr	r2, [pc, #496]	; (800728c <UART_SetConfig+0x2e8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d138      	bne.n	8007110 <UART_SetConfig+0x16c>
 800709e:	4b7a      	ldr	r3, [pc, #488]	; (8007288 <UART_SetConfig+0x2e4>)
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d82d      	bhi.n	8007108 <UART_SetConfig+0x164>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x110>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	08007109 	.word	0x08007109
 80070bc:	08007109 	.word	0x08007109
 80070c0:	08007109 	.word	0x08007109
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007109 	.word	0x08007109
 80070d0:	08007109 	.word	0x08007109
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	08007109 	.word	0x08007109
 80070dc:	08007109 	.word	0x08007109
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007101 	.word	0x08007101
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e0d8      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e0d4      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e0d0      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e0cc      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710e:	e0c8      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5e      	ldr	r2, [pc, #376]	; (8007290 <UART_SetConfig+0x2ec>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d125      	bne.n	8007166 <UART_SetConfig+0x1c2>
 800711a:	4b5b      	ldr	r3, [pc, #364]	; (8007288 <UART_SetConfig+0x2e4>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007120:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007124:	2b30      	cmp	r3, #48	; 0x30
 8007126:	d016      	beq.n	8007156 <UART_SetConfig+0x1b2>
 8007128:	2b30      	cmp	r3, #48	; 0x30
 800712a:	d818      	bhi.n	800715e <UART_SetConfig+0x1ba>
 800712c:	2b20      	cmp	r3, #32
 800712e:	d00a      	beq.n	8007146 <UART_SetConfig+0x1a2>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d814      	bhi.n	800715e <UART_SetConfig+0x1ba>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <UART_SetConfig+0x19a>
 8007138:	2b10      	cmp	r3, #16
 800713a:	d008      	beq.n	800714e <UART_SetConfig+0x1aa>
 800713c:	e00f      	b.n	800715e <UART_SetConfig+0x1ba>
 800713e:	2300      	movs	r3, #0
 8007140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007144:	e0ad      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007146:	2302      	movs	r3, #2
 8007148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714c:	e0a9      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800714e:	2304      	movs	r3, #4
 8007150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007154:	e0a5      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007156:	2308      	movs	r3, #8
 8007158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715c:	e0a1      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800715e:	2310      	movs	r3, #16
 8007160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007164:	e09d      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a4a      	ldr	r2, [pc, #296]	; (8007294 <UART_SetConfig+0x2f0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d125      	bne.n	80071bc <UART_SetConfig+0x218>
 8007170:	4b45      	ldr	r3, [pc, #276]	; (8007288 <UART_SetConfig+0x2e4>)
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800717a:	2bc0      	cmp	r3, #192	; 0xc0
 800717c:	d016      	beq.n	80071ac <UART_SetConfig+0x208>
 800717e:	2bc0      	cmp	r3, #192	; 0xc0
 8007180:	d818      	bhi.n	80071b4 <UART_SetConfig+0x210>
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d00a      	beq.n	800719c <UART_SetConfig+0x1f8>
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d814      	bhi.n	80071b4 <UART_SetConfig+0x210>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <UART_SetConfig+0x1f0>
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d008      	beq.n	80071a4 <UART_SetConfig+0x200>
 8007192:	e00f      	b.n	80071b4 <UART_SetConfig+0x210>
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e082      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800719c:	2302      	movs	r3, #2
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e07e      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80071a4:	2304      	movs	r3, #4
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071aa:	e07a      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80071ac:	2308      	movs	r3, #8
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e076      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80071b4:	2310      	movs	r3, #16
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ba:	e072      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a35      	ldr	r2, [pc, #212]	; (8007298 <UART_SetConfig+0x2f4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d12a      	bne.n	800721c <UART_SetConfig+0x278>
 80071c6:	4b30      	ldr	r3, [pc, #192]	; (8007288 <UART_SetConfig+0x2e4>)
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d4:	d01a      	beq.n	800720c <UART_SetConfig+0x268>
 80071d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071da:	d81b      	bhi.n	8007214 <UART_SetConfig+0x270>
 80071dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e0:	d00c      	beq.n	80071fc <UART_SetConfig+0x258>
 80071e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e6:	d815      	bhi.n	8007214 <UART_SetConfig+0x270>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <UART_SetConfig+0x250>
 80071ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f0:	d008      	beq.n	8007204 <UART_SetConfig+0x260>
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x270>
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fa:	e052      	b.n	80072a2 <UART_SetConfig+0x2fe>
 80071fc:	2302      	movs	r3, #2
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007202:	e04e      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007204:	2304      	movs	r3, #4
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720a:	e04a      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800720c:	2308      	movs	r3, #8
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e046      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721a:	e042      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a17      	ldr	r2, [pc, #92]	; (8007280 <UART_SetConfig+0x2dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d13a      	bne.n	800729c <UART_SetConfig+0x2f8>
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <UART_SetConfig+0x2e4>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007234:	d01a      	beq.n	800726c <UART_SetConfig+0x2c8>
 8007236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800723a:	d81b      	bhi.n	8007274 <UART_SetConfig+0x2d0>
 800723c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007240:	d00c      	beq.n	800725c <UART_SetConfig+0x2b8>
 8007242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007246:	d815      	bhi.n	8007274 <UART_SetConfig+0x2d0>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <UART_SetConfig+0x2b0>
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007250:	d008      	beq.n	8007264 <UART_SetConfig+0x2c0>
 8007252:	e00f      	b.n	8007274 <UART_SetConfig+0x2d0>
 8007254:	2300      	movs	r3, #0
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e022      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800725c:	2302      	movs	r3, #2
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e01e      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e01a      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e016      	b.n	80072a2 <UART_SetConfig+0x2fe>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e012      	b.n	80072a2 <UART_SetConfig+0x2fe>
 800727c:	cfff69f3 	.word	0xcfff69f3
 8007280:	40008000 	.word	0x40008000
 8007284:	40013800 	.word	0x40013800
 8007288:	40021000 	.word	0x40021000
 800728c:	40004400 	.word	0x40004400
 8007290:	40004800 	.word	0x40004800
 8007294:	40004c00 	.word	0x40004c00
 8007298:	40005000 	.word	0x40005000
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4aae      	ldr	r2, [pc, #696]	; (8007560 <UART_SetConfig+0x5bc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	f040 8097 	bne.w	80073dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d823      	bhi.n	80072fe <UART_SetConfig+0x35a>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0x318>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072ff 	.word	0x080072ff
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	080072ff 	.word	0x080072ff
 80072cc:	080072ef 	.word	0x080072ef
 80072d0:	080072ff 	.word	0x080072ff
 80072d4:	080072ff 	.word	0x080072ff
 80072d8:	080072ff 	.word	0x080072ff
 80072dc:	080072f7 	.word	0x080072f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fd fe96 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80072e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072e6:	e010      	b.n	800730a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e8:	4b9e      	ldr	r3, [pc, #632]	; (8007564 <UART_SetConfig+0x5c0>)
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072ec:	e00d      	b.n	800730a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ee:	f7fd fe21 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 80072f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072f4:	e009      	b.n	800730a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072fc:	e005      	b.n	800730a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8130 	beq.w	8007572 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	4a94      	ldr	r2, [pc, #592]	; (8007568 <UART_SetConfig+0x5c4>)
 8007318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800731c:	461a      	mov	r2, r3
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	fbb3 f3f2 	udiv	r3, r3, r2
 8007324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	4413      	add	r3, r2
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	429a      	cmp	r2, r3
 8007334:	d305      	bcc.n	8007342 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	429a      	cmp	r2, r3
 8007340:	d903      	bls.n	800734a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007348:	e113      	b.n	8007572 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2200      	movs	r2, #0
 800734e:	60bb      	str	r3, [r7, #8]
 8007350:	60fa      	str	r2, [r7, #12]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	4a84      	ldr	r2, [pc, #528]	; (8007568 <UART_SetConfig+0x5c4>)
 8007358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800735c:	b29b      	uxth	r3, r3
 800735e:	2200      	movs	r2, #0
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007368:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800736c:	f7f9 fb72 	bl	8000a54 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4610      	mov	r0, r2
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	020b      	lsls	r3, r1, #8
 8007382:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007386:	0202      	lsls	r2, r0, #8
 8007388:	6979      	ldr	r1, [r7, #20]
 800738a:	6849      	ldr	r1, [r1, #4]
 800738c:	0849      	lsrs	r1, r1, #1
 800738e:	2000      	movs	r0, #0
 8007390:	460c      	mov	r4, r1
 8007392:	4605      	mov	r5, r0
 8007394:	eb12 0804 	adds.w	r8, r2, r4
 8007398:	eb43 0905 	adc.w	r9, r3, r5
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	469a      	mov	sl, r3
 80073a4:	4693      	mov	fp, r2
 80073a6:	4652      	mov	r2, sl
 80073a8:	465b      	mov	r3, fp
 80073aa:	4640      	mov	r0, r8
 80073ac:	4649      	mov	r1, r9
 80073ae:	f7f9 fb51 	bl	8000a54 <__aeabi_uldivmod>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4613      	mov	r3, r2
 80073b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c0:	d308      	bcc.n	80073d4 <UART_SetConfig+0x430>
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c8:	d204      	bcs.n	80073d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a3a      	ldr	r2, [r7, #32]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	e0ce      	b.n	8007572 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073da:	e0ca      	b.n	8007572 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e4:	d166      	bne.n	80074b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d827      	bhi.n	800743e <UART_SetConfig+0x49a>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <UART_SetConfig+0x450>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	0800743f 	.word	0x0800743f
 8007404:	0800742f 	.word	0x0800742f
 8007408:	0800743f 	.word	0x0800743f
 800740c:	0800743f 	.word	0x0800743f
 8007410:	0800743f 	.word	0x0800743f
 8007414:	08007437 	.word	0x08007437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007418:	f7fd fdfa 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 800741c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800741e:	e014      	b.n	800744a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007420:	f7fd fe0c 	bl	800503c <HAL_RCC_GetPCLK2Freq>
 8007424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007426:	e010      	b.n	800744a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007428:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <UART_SetConfig+0x5c0>)
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800742c:	e00d      	b.n	800744a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742e:	f7fd fd81 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8007432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007434:	e009      	b.n	800744a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800743c:	e005      	b.n	800744a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8090 	beq.w	8007572 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	4a44      	ldr	r2, [pc, #272]	; (8007568 <UART_SetConfig+0x5c4>)
 8007458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745c:	461a      	mov	r2, r3
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	fbb3 f3f2 	udiv	r3, r3, r2
 8007464:	005a      	lsls	r2, r3, #1
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	441a      	add	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	2b0f      	cmp	r3, #15
 800747c:	d916      	bls.n	80074ac <UART_SetConfig+0x508>
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007484:	d212      	bcs.n	80074ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f023 030f 	bic.w	r3, r3, #15
 800748e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	b29b      	uxth	r3, r3
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	b29a      	uxth	r2, r3
 800749c:	8bfb      	ldrh	r3, [r7, #30]
 800749e:	4313      	orrs	r3, r2
 80074a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	8bfa      	ldrh	r2, [r7, #30]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	e062      	b.n	8007572 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074b2:	e05e      	b.n	8007572 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d828      	bhi.n	800750e <UART_SetConfig+0x56a>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x520>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	080074f1 	.word	0x080074f1
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	0800750f 	.word	0x0800750f
 80074d4:	080074ff 	.word	0x080074ff
 80074d8:	0800750f 	.word	0x0800750f
 80074dc:	0800750f 	.word	0x0800750f
 80074e0:	0800750f 	.word	0x0800750f
 80074e4:	08007507 	.word	0x08007507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fd fd92 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ee:	e014      	b.n	800751a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f0:	f7fd fda4 	bl	800503c <HAL_RCC_GetPCLK2Freq>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074f6:	e010      	b.n	800751a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f8:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <UART_SetConfig+0x5c0>)
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074fc:	e00d      	b.n	800751a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fe:	f7fd fd19 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007504:	e009      	b.n	800751a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800750c:	e005      	b.n	800751a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007518:	bf00      	nop
    }

    if (pclk != 0U)
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d028      	beq.n	8007572 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	4a10      	ldr	r2, [pc, #64]	; (8007568 <UART_SetConfig+0x5c4>)
 8007526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752a:	461a      	mov	r2, r3
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	085b      	lsrs	r3, r3, #1
 8007538:	441a      	add	r2, r3
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2b0f      	cmp	r3, #15
 8007548:	d910      	bls.n	800756c <UART_SetConfig+0x5c8>
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007550:	d20c      	bcs.n	800756c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	b29a      	uxth	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e009      	b.n	8007572 <UART_SetConfig+0x5ce>
 800755e:	bf00      	nop
 8007560:	40008000 	.word	0x40008000
 8007564:	00f42400 	.word	0x00f42400
 8007568:	08007cd4 	.word	0x08007cd4
      }
      else
      {
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2201      	movs	r2, #1
 8007576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2201      	movs	r2, #1
 800757e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2200      	movs	r2, #0
 800758c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800758e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007592:	4618      	mov	r0, r3
 8007594:	3730      	adds	r7, #48	; 0x30
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800759c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769a:	d10a      	bne.n	80076b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b098      	sub	sp, #96	; 0x60
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f0:	f7fa fd2a 	bl	8002148 <HAL_GetTick>
 80076f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b08      	cmp	r3, #8
 8007702:	d12f      	bne.n	8007764 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800770c:	2200      	movs	r2, #0
 800770e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f88e 	bl	8007834 <UART_WaitOnFlagUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d022      	beq.n	8007764 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	653b      	str	r3, [r7, #80]	; 0x50
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773c:	647b      	str	r3, [r7, #68]	; 0x44
 800773e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e063      	b.n	800782c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b04      	cmp	r3, #4
 8007770:	d149      	bne.n	8007806 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007772:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777a:	2200      	movs	r2, #0
 800777c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f857 	bl	8007834 <UART_WaitOnFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d03c      	beq.n	8007806 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	623b      	str	r3, [r7, #32]
   return(result);
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077aa:	633b      	str	r3, [r7, #48]	; 0x30
 80077ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077de:	61fa      	str	r2, [r7, #28]
 80077e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	69b9      	ldr	r1, [r7, #24]
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	617b      	str	r3, [r7, #20]
   return(result);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e012      	b.n	800782c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3758      	adds	r7, #88	; 0x58
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007844:	e04f      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d04b      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784e:	f7fa fc7b 	bl	8002148 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	429a      	cmp	r2, r3
 800785c:	d302      	bcc.n	8007864 <UART_WaitOnFlagUntilTimeout+0x30>
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e04e      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d037      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d034      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d031      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d110      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2208      	movs	r2, #8
 8007896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f838 	bl	800790e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2208      	movs	r2, #8
 80078a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e029      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c0:	d111      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f81e 	bl	800790e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e00f      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4013      	ands	r3, r2
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	429a      	cmp	r2, r3
 8007902:	d0a0      	beq.n	8007846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800790e:	b480      	push	{r7}
 8007910:	b095      	sub	sp, #84	; 0x54
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800792a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
 8007936:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800793a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	61fb      	str	r3, [r7, #28]
   return(result);
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	64bb      	str	r3, [r7, #72]	; 0x48
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3308      	adds	r3, #8
 800796a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800796c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e3      	bne.n	8007948 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007984:	2b01      	cmp	r3, #1
 8007986:	d118      	bne.n	80079ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	60bb      	str	r3, [r7, #8]
   return(result);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f023 0310 	bic.w	r3, r3, #16
 800799c:	647b      	str	r3, [r7, #68]	; 0x44
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6979      	ldr	r1, [r7, #20]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	613b      	str	r3, [r7, #16]
   return(result);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80079ce:	bf00      	nop
 80079d0:	3754      	adds	r7, #84	; 0x54
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e027      	b.n	8007a40 <HAL_UARTEx_DisableFifoMode+0x66>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	; 0x24
 80079fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e02d      	b.n	8007ac0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f84f 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e02d      	b.n	8007b3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	; 0x24
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f811 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b64:	e031      	b.n	8007bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b66:	2308      	movs	r3, #8
 8007b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	0e5b      	lsrs	r3, r3, #25
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0f5b      	lsrs	r3, r3, #29
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	7b3a      	ldrb	r2, [r7, #12]
 8007b92:	4911      	ldr	r1, [pc, #68]	; (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007b94:	5c8a      	ldrb	r2, [r1, r2]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b9a:	7b3a      	ldrb	r2, [r7, #12]
 8007b9c:	490f      	ldr	r1, [pc, #60]	; (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	7b7a      	ldrb	r2, [r7, #13]
 8007bb0:	4909      	ldr	r1, [pc, #36]	; (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007bb2:	5c8a      	ldrb	r2, [r1, r2]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bb8:	7b7a      	ldrb	r2, [r7, #13]
 8007bba:	4908      	ldr	r1, [pc, #32]	; (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	08007cec 	.word	0x08007cec
 8007bdc:	08007cf4 	.word	0x08007cf4

08007be0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	ed93 7a06 	vldr	s14, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	edd3 7a07 	vldr	s15, [r3, #28]
 8007bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c10:	eeb1 7a67 	vneg.f32	s14, s15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d006      	beq.n	8007c44 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	220c      	movs	r2, #12
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f804 	bl	8007c4c <memset>
  }

}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <memset>:
 8007c4c:	4402      	add	r2, r0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d100      	bne.n	8007c56 <memset+0xa>
 8007c54:	4770      	bx	lr
 8007c56:	f803 1b01 	strb.w	r1, [r3], #1
 8007c5a:	e7f9      	b.n	8007c50 <memset+0x4>

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4d0d      	ldr	r5, [pc, #52]	; (8007c94 <__libc_init_array+0x38>)
 8007c60:	4c0d      	ldr	r4, [pc, #52]	; (8007c98 <__libc_init_array+0x3c>)
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	2600      	movs	r6, #0
 8007c68:	42a6      	cmp	r6, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	4d0b      	ldr	r5, [pc, #44]	; (8007c9c <__libc_init_array+0x40>)
 8007c6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ca0 <__libc_init_array+0x44>)
 8007c70:	f000 f818 	bl	8007ca4 <_init>
 8007c74:	1b64      	subs	r4, r4, r5
 8007c76:	10a4      	asrs	r4, r4, #2
 8007c78:	2600      	movs	r6, #0
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c84:	4798      	blx	r3
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8e:	4798      	blx	r3
 8007c90:	3601      	adds	r6, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	08007d04 	.word	0x08007d04
 8007c98:	08007d04 	.word	0x08007d04
 8007c9c:	08007d04 	.word	0x08007d04
 8007ca0:	08007d08 	.word	0x08007d08

08007ca4 <_init>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr

08007cb0 <_fini>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr
